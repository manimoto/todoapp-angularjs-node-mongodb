{"version":3,"sources":["Controllers/LoginController.ts"],"names":[],"mappings":"AAAA,IAAO,GAAG,CAsCT;AAtCD,WAAO,GAAG;IAAC,IAAA,WAAW,CAsCrB;IAtCU,WAAA,WAAW;QAgBlB;YAmBI,yBAAoB,YAAuC,EAAU,SAAS;gBAA1D,iBAAY,GAAZ,YAAY,CAA2B;gBAAU,cAAS,GAAT,SAAS,CAAA;YAAI,CAAC;YAhBnF,+BAAK,GAAL,UAAM,IAAgB;gBAAtB,iBAcC;gBAbG,IAAI,MAAM,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;gBACnC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC;qBACnC,IAAI,CAAC,UAAC,QAAa;oBAChB,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;wBACN,MAAM,CAAC,MAAM,GAAG,gCAAgC,CAAC;oBACrD,CAAC;oBACD,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAA,CAAC;wBACT,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;wBAC9B,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBACrC,CAAC;gBACL,CAAC,CAAC,CAAA;YACV,CAAC;YACM,uBAAO,GAAG,CAAC,cAAc,EAAC,WAAW,CAAC,CAAA;YAGjD,sBAAC;SArBD,AAqBC,IAAA;QArBY,2BAAe,kBAqB3B,CAAA;IACL,CAAC,EAtCU,WAAW,GAAX,eAAW,KAAX,eAAW,QAsCrB;AAAD,CAAC,EAtCM,GAAG,KAAH,GAAG,QAsCT;AAED,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAA","file":"Controllers/LoginController.js","sourcesContent":["module App.Controllers {\r\n    import LoginModel = App.Models.LoginModel;\r\n\r\n    interface ILoginBindings {\r\n        user: LoginModel;\r\n        lgnmsg:any;\r\n    }\r\n\r\n    interface ILoginControllerScope{\r\n        lgnCntrl: LoginController;\r\n    }\r\n\r\n    interface ILoginController extends ILoginBindings {\r\n        login(user: LoginModel): void;\r\n    }\r\n\r\n    export class LoginController implements ILoginController {\r\n        public user: LoginModel;\r\n        public lgnmsg: any;\r\n        login(user: LoginModel) {\r\n            var __this = this;\r\n            this.user.email = user.email;\r\n            this.user.password = user.password;\r\n            this.LoginService.loginUserService(user)\r\n                .then((response: any) => {\r\n                    if(Error){\r\n                        __this.lgnmsg = \"Username or Password is Wrong!\";\r\n                    }\r\n                    if(response){\r\n                        __this.lgnmsg = response.data;\r\n                        this.$location.url('/directory');\r\n                    }\r\n                })\r\n        }\r\n        static $inject = ['LoginService','$location']\r\n        constructor(private LoginService: App.Services.LoginService, private $location) { }\r\n         \r\n    }\r\n}\r\n\r\napp2.controller('LoginController', App.Controllers.LoginController)"],"sourceRoot":"/source/"}