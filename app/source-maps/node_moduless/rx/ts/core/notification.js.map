{"version":3,"sources":["node_moduless/rx/ts/core/notification.ts"],"names":[],"mappings":"AAAA,oDAAoD;AACpD,mDAAmD;AACnD,wCAAwC;AACxC,2CAA2C;AAC3C,IAAO,EAAE,CAiER;AAjED,WAAO,EAAE;AAiET,CAAC,EAjEM,EAAE,KAAF,EAAE,QAiER;AAGD,CAAC;IACG,IAAI,YAAY,GAA4B,IAAI,EAAE,CAAC,YAAY,CAAS,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAE1I,IAAI,QAA8B,CAAC;IACnC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC9B,YAAY,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,cAAM,OAAA,KAAK,CAAC,QAAQ,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAE3E,IAAI,UAAU,GAA0B,YAAY,CAAC,YAAY,EAAE,CAAC;IACpE,IAAI,UAAU,GAA0B,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAE9F,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IACzC,EAAE,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;AACxC,CAAC,CAAC,CAAC","file":"node_moduless/rx/ts/core/notification.js","sourcesContent":["/// <reference path=\"./disposables/disposable.ts\" />\n/// <reference path=\"./concurrency/scheduler.ts\" />\n/// <reference path=\"./observable.ts\" />\n/// <reference path=\"./observer-lite.ts\" />\nmodule Rx {\n    /**\n     *  Represents a notification to an observer.\n     */\n    export interface Notification<T> {\n        /**\n         * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.\n         *\n         * @memberOf Notification\n         * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..\n         * @param {Function} onError Delegate to invoke for an OnError notification.\n         * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.\n         * @returns {Any} Result produced by the observation.\n         */\n        accept(observer: IObserver<T>): void;\n        /**\n         * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.\n         *\n         * @memberOf Notification\n         * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..\n         * @param {Function} onError Delegate to invoke for an OnError notification.\n         * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.\n         * @returns {Any} Result produced by the observation.\n         */\n        accept<TResult>(onNext: (value: T) => TResult, onError: (exception: any) => TResult, onCompleted: () => TResult): TResult;\n\n        /**\n         * Returns an observable sequence with a single notification.\n         *\n         * @memberOf Notifications\n         * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.\n         * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.\n         */\n        toObservable(scheduler?: IScheduler): Observable<T>;\n\n        hasValue: boolean;\n        equals(other: Notification<T>): boolean;\n        kind: string;\n        value: T;\n        error: any;\n    }\n\n    interface NotificationStatic {\n        new <T>(kind: any, value: any, exception: any, accept: any, acceptObservable: any, toString: any) : Notification<T>;\n\n        /**\n        * Creates an object that represents an OnNext notification to an observer.\n        * @param {Any} value The value contained in the notification.\n        * @returns {Notification} The OnNext notification containing the value.\n        */\n        createOnNext<T>(value: T): Notification<T>;\n        /**\n        * Creates an object that represents an OnError notification to an observer.\n        * @param {Any} error The exception contained in the notification.\n        * @returns {Notification} The OnError notification containing the exception.\n        */\n        createOnError<T>(exception: any): Notification<T>;\n        /**\n        * Creates an object that represents an OnCompleted notification to an observer.\n        * @returns {Notification} The OnCompleted notification.\n        */\n        createOnCompleted<T>(): Notification<T>;\n    }\n\n    export var Notification : NotificationStatic;\n}\n\n\n(function() {\n    var notification: Rx.Notification<number> = new Rx.Notification<number>(undefined, undefined, undefined, undefined, undefined, undefined);\n\n    var observer: Rx.IObserver<number>;\n    notification.accept(observer);\n    notification.accept((n) => n.toString(), (e) => e, () => false.toString());\n\n    var observable: Rx.Observable<number> = notification.toObservable();\n    var observable: Rx.Observable<number> = notification.toObservable(Rx.Scheduler.currentThread);\n\n    Rx.Notification.createOnNext(() => true);\n    Rx.Notification.createOnError(new Error('a'));\n    Rx.Notification.createOnCompleted();\n});\n"],"sourceRoot":"/source/"}