{"version":3,"sources":["node_moduless/rx/ts/core/observer-lite.ts"],"names":[],"mappings":"AAAA,oDAAoD;AACpD,6CAA6C;AAC7C,IAAO,EAAE,CAqDR;AArDD,WAAO,EAAE;AAqDT,CAAC,EArDM,EAAE,KAAF,EAAE,QAqDR;AAGD,CAAC;IACG,IAAI,SAAgC,CAAC;IACrC,IAAI,QAA8B,CAAC;IAEnC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxB,SAAS,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClC,SAAS,CAAC,WAAW,EAAE,CAAC;IAExB,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACjC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAEvB,IAAI,EAAE,GAAwB,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC3D,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,UAAC,CAAC,IAAO,CAAC,CAAC,CAAC;IAC9C,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,UAAC,CAAC,IAAO,CAAC,EAAE,cAAQ,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC","file":"node_moduless/rx/ts/core/observer-lite.js","sourcesContent":["/// <reference path=\"./disposables/disposable.ts\" />\n/// <reference path=\"./checkedobserver.ts\" />\nmodule Rx {\n    /**\n    * Supports push-style iteration over an observable sequence.\n    */\n    export interface IObserver<T> {\n        /**\n        * Notifies the observer of a new element in the sequence.\n        * @param {Any} value Next element in the sequence.\n        */\n        onNext(value: T): void;\n        /**\n        * Notifies the observer that an exception has occurred.\n        * @param {Any} error The error that has occurred.\n        */\n        onError(exception: any): void;\n        /**\n        * Notifies the observer of the end of the sequence.\n        */\n        onCompleted(): void;\n    }\n    \n    export interface Observer<T> {\n        /**\n        * Notifies the observer of a new element in the sequence.\n        * @param {Any} value Next element in the sequence.\n        */\n        onNext(value: T): void;\n        /**\n        * Notifies the observer that an exception has occurred.\n        * @param {Any} error The error that has occurred.\n        */\n        onError(exception: any): void;\n        /**\n        * Notifies the observer of the end of the sequence.\n        */\n        onCompleted(): void;\n    }\n\n    export interface ObserverStatic {\n        /**\n        *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.\n        * @param {Function} [onNext] Observer's OnNext action implementation.\n        * @param {Function} [onError] Observer's OnError action implementation.\n        * @param {Function} [onCompleted] Observer's OnCompleted action implementation.\n        * @returns {Observer} The observer object implemented using the given actions.\n        */\n        create<T>(onNext?: (value: T) => void, onError?: (exception: any) => void, onCompleted?: () => void): Observer<T>;\n    }\n\n    /**\n    * Supports push-style iteration over an observable sequence.\n    */\n    export var Observer: ObserverStatic;\n}\n\n\n(function() {\n    var iobserver: Rx.IObserver<boolean>;\n    var observer: Rx.Observer<boolean>;\n\n    iobserver.onNext(false);\n    iobserver.onError(new Error('a'));\n    iobserver.onCompleted();\n\n    observer.onNext(false);\n    observer.onError(new Error('a'));\n    observer.onCompleted();\n\n    var so: Rx.Observer<number> = Rx.Observer.create((v) => 1);\n    so = Rx.Observer.create((v) => 1, (e) => { });\n    so = Rx.Observer.create((v) => 1, (e) => { }, () => { });\n});\n"],"sourceRoot":"/source/"}