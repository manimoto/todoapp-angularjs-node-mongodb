{"version":3,"sources":["node_modulesss/rx/ts/core/concurrency/scheduler.recursive.ts"],"names":[],"mappings":"AAAA,qDAAqD;AAsBrD,CAAC;IACG,IAAI,CAAgB,CAAC;IAErB,IAAI,CAAC,GAAmB,CAAC,CAAC,iBAAiB,CAAC,OAAO,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAnB,CAAmB,CAAC,CAAC;IACpF,IAAI,CAAC,GAAmB,CAAC,CAAC,uBAAuB,CAAC,OAAO,EAAE,GAAG,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAnB,CAAmB,CAAC,CAAC;AACnG,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/concurrency/scheduler.recursive.js","sourcesContent":["/// <reference path=\"../disposables/disposable.ts\" />\nmodule Rx {\n    export interface IScheduler {\n        /**\n         * Schedules an action to be executed recursively.\n         * @param {Mixed} state State passed to the action to be executed.\n         * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.\n         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n         */\n        scheduleRecursive<TState>(state: TState, action: (state: TState, action: (state: TState) => void) => void): IDisposable;\n\n        /**\n         * Schedules an action to be executed recursively after a specified relative due time.\n         * @param {Mixed} state State passed to the action to be executed.\n         * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.\n         * @param {Number}dueTime Relative time after which to execute the action for the first time.\n         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n         */\n        scheduleRecursiveFuture<TState, TTime extends number | Date>(state: TState, dueTime: TTime, action: (state: TState, action: (state: TState, dueTime: TTime) => void) => void): IDisposable;\n    }\n}\n\n(function() {\n    var s: Rx.IScheduler;\n\n    var d: Rx.IDisposable = s.scheduleRecursive('state', (s, a) => Rx.Disposable.empty);\n    var d: Rx.IDisposable = s.scheduleRecursiveFuture('state', 100, (s, a) => Rx.Disposable.empty);\n})\n"],"sourceRoot":"/source/"}