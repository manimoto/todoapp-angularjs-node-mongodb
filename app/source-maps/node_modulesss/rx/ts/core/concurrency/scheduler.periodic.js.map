{"version":3,"sources":["node_modulesss/rx/ts/core/concurrency/scheduler.periodic.ts"],"names":[],"mappings":"AAAA,qDAAqD;AAcrD,CAAC;IACG,IAAI,CAAiB,CAAC;IAEtB,IAAI,CAAC,GAAoB,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/concurrency/scheduler.periodic.js","sourcesContent":["/// <reference path=\"../disposables/disposable.ts\" />\nmodule Rx {\n    export interface IScheduler {\n        /**\n         * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.\n         * @param {Mixed} state Initial state passed to the action upon the first iteration.\n         * @param {Number} period Period for running the work periodically.\n         * @param {Function} action Action to be executed, potentially updating the state.\n         * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).\n         */\n        schedulePeriodic<TState>(state: TState, period: number, action: (state: TState) => TState): IDisposable;\n    }\n}\n\n(function() {\n    var s : Rx.IScheduler;\n\n    var d : Rx.IDisposable = s.schedulePeriodic('state', 100, (s) => s);\n})\n"],"sourceRoot":"/source/"}