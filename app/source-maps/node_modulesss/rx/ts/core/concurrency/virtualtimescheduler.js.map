{"version":3,"sources":["node_modulesss/rx/ts/core/concurrency/virtualtimescheduler.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,uCAAuC;AACvC,2CAA2C;AA+D3C,CAAC;IAGG,IAAI,GAAoC,CAAC;IAEzC,IAAI,CAAC,GAAY,GAAG,CAAC,SAAS,CAAC;IAC/B,IAAI,CAAC,GAAO,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9B,IAAI,CAAC,GAAW,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACzC,IAAI,CAAC,GAAO,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACrC,IAAI,CAAC,GAAmB,GAAG,CAAC,KAAK,EAAE,CAAC;IACpC,GAAG,CAAC,IAAI,EAAE,CAAC;IACX,GAAG,CAAC,SAAS,CAAK,IAAI,CAAC,CAAC;IACxB,GAAG,CAAC,SAAS,CAAK,IAAI,CAAC,CAAC;IACxB,GAAG,CAAC,KAAK,CAAK,IAAI,CAAC,CAAC;IACpB,IAAI,CAAC,GAAmC,GAAG,CAAC,OAAO,EAAE,CAAC;IACtD,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC;AACtB,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/concurrency/virtualtimescheduler.js","sourcesContent":["/// <reference path=\"../disposables/disposable.ts\" />\n/// <reference path=\"./scheduler.ts\" />\n/// <reference path=\"./scheduleditem.ts\" />\nmodule Rx {\n    export interface VirtualTimeScheduler<TAbsolute, TRelative> extends IScheduler {\n        /**\n         * Adds a relative time value to an absolute time value.\n         * @param {Number} absolute Absolute virtual time value.\n         * @param {Number} relative Relative virtual time value to add.\n         * @return {Number} Resulting absolute virtual time sum value.\n         */\n        add(from: TAbsolute, by: TRelative): TAbsolute;\n\n        /**\n         * Converts an absolute time to a number\n         * @param {Any} The absolute time.\n         * @returns {Number} The absolute time in ms\n         */\n        toAbsoluteTime(duetime: TAbsolute): number;\n\n        /**\n         * Converts the TimeSpan value to a relative virtual time value.\n         * @param {Number} timeSpan TimeSpan value to convert.\n         * @return {Number} Corresponding relative virtual time value.\n         */\n        toRelativeTime(duetime: number): TRelative;\n\n        /**\n         * Starts the virtual time scheduler.\n         */\n        start(): IDisposable;\n\n        /**\n         * Stops the virtual time scheduler.\n         */\n        stop(): void;\n\n        /**\n         * Advances the scheduler's clock to the specified time, running all work till that point.\n         * @param {Number} time Absolute time to advance the scheduler's clock to.\n         */\n        advanceTo(time: TAbsolute): void;\n\n        /**\n         * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.\n         * @param {Number} time Relative time to advance the scheduler's clock by.\n         */\n        advanceBy(time: TRelative): void;\n\n        /**\n         * Advances the scheduler's clock by the specified relative time.\n         * @param {Number} time Relative time to advance the scheduler's clock by.\n         */\n        sleep(time: TRelative): void;\n\n        isEnabled: boolean;\n\n        /**\n         * Gets the next scheduled item to be executed.\n         * @returns {ScheduledItem} The next scheduled item.\n         */\n        getNext(): internals.ScheduledItem<TAbsolute>;\n    }\n}\n\n(function() {\n    interface TA { }\n    interface TR { }\n    var vts: Rx.VirtualTimeScheduler<TA, TR>;\n\n    var b: boolean = vts.isEnabled;\n    var a: TA = vts.add(100, 500);\n    var n: number = vts.toAbsoluteTime(1000);\n    var r: TR = vts.toRelativeTime(1000);\n    var d: Rx.IDisposable = vts.start();\n    vts.stop();\n    vts.advanceTo(<TA>null);\n    vts.advanceBy(<TR>null);\n    vts.sleep(<TR>null);\n    var i: Rx.internals.ScheduledItem<TA> = vts.getNext();\n    b = vts.isEnabled;\n})\n"],"sourceRoot":"/source/"}