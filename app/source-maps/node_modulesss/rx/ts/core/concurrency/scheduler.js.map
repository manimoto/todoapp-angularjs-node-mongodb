{"version":3,"sources":["node_modulesss/rx/ts/core/concurrency/scheduler.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,IAAO,EAAE,CAwCR;AAxCD,WAAO,EAAE;AAwCT,CAAC,EAxCM,EAAE,KAAF,EAAE,QAwCR;AAED,CAAC;IACG,IAAI,CAAgB,CAAC;IAErB,IAAI,CAAC,GAAmB,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAC,EAAE,EAAE,CAAC,IAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAnB,CAAmB,CAAC,CAAC;IAC7E,IAAI,CAAC,GAAmB,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,UAAC,EAAE,EAAE,CAAC,IAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAnB,CAAmB,CAAC,CAAC;IACxF,IAAI,CAAC,GAAkB,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;IACxC,IAAI,CAAC,GAAY,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAClD,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/concurrency/scheduler.js","sourcesContent":["/// <reference path=\"../disposables/disposable.ts\" />\nmodule Rx {\n    export interface IScheduler {\n        /** Gets the current time according to the local machine's system clock. */\n        now(): number;\n\n        /**\n          * Schedules an action to be executed.\n          * @param state State passed to the action to be executed.\n          * @param {Function} action Action to be executed.\n          * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n          */\n        schedule<TState>(state: TState, action: (scheduler: IScheduler, state: TState) => IDisposable): IDisposable;\n\n        /**\n         * Schedules an action to be executed after dueTime.\n         * @param state State passed to the action to be executed.\n         * @param {Function} action Action to be executed.\n         * @param {Number} dueTime Relative time after which to execute the action.\n         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n         */\n        scheduleFuture<TState>(state: TState, dueTime: number | Date, action: (scheduler: IScheduler, state: TState) => IDisposable): IDisposable;\n    }\n\n    export interface SchedulerStatic {\n        /** Gets the current time according to the local machine's system clock. */\n        now(): number;\n\n        /**\n         * Normalizes the specified TimeSpan value to a positive value.\n         * @param {Number} timeSpan The time span value to normalize.\n         * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0\n         */\n        normalize(timeSpan: number): number;\n\n        /** Determines whether the given object is a scheduler */\n        isScheduler(s: any): boolean;\n    }\n\n    /** Provides a set of static properties to access commonly used schedulers. */\n    export var Scheduler: SchedulerStatic;\n}\n\n(function() {\n    var s: Rx.IScheduler;\n\n    var d: Rx.IDisposable = s.schedule('state', (sh, s ) => Rx.Disposable.empty);\n    var d: Rx.IDisposable = s.scheduleFuture('state', 100, (sh, s ) => Rx.Disposable.empty);\n    var n : () => number = Rx.Scheduler.now;\n    var a : number = Rx.Scheduler.normalize(1000);\n})\n"],"sourceRoot":"/source/"}