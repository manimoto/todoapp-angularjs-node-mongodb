{"version":3,"sources":["node_modulesss/rx/ts/core/subjects/subject.ts"],"names":[],"mappings":"AAAA,yCAAyC;AACzC,4CAA4C;AAC5C,oDAAoD;AAEpD,IAAO,EAAE,CAmCR;AAnCD,WAAO,EAAE;AAmCT,CAAC,EAnCM,EAAE,KAAF,EAAE,QAmCR;AAED,CAAC;IACG,IAAI,EAAE,GAAyB,IAAI,EAAE,CAAC,OAAO,EAAW,CAAC;IACzD,IAAI,CAAC,GAAyB,IAAI,EAAE,CAAC,OAAO,EAAW,CAAC;IAExD,EAAE,CAAC,YAAY,EAAE,CAAC;IAClB,CAAC,CAAC,YAAY,EAAE,CAAC;IAEjB,CAAC,CAAC,UAAU,CAAC;IAEb,IAAI,GAAG,GAA2B,CAAC,CAAC;IACpC,IAAI,EAAE,GAA6B,CAAC,CAAC;IACrC,IAAI,EAAE,GAA0B,CAAC,CAAC;IAClC,IAAI,CAAC,GAA4B,CAAC,CAAC;IACnC,IAAI,CAAC,GAAoB,CAAC,CAAC;IAE3B,IAAI,EAAE,GAA0B,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAC3D,IAAI,EAAE,GAA0B,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/subjects/subject.js","sourcesContent":["/// <reference path=\"../observable.ts\" />\n/// <reference path=\"../observer-lite.ts\" />\n/// <reference path=\"../disposables/disposable.ts\"/>\n\nmodule Rx {\n    /**\n     *  Represents an object that is both an observable sequence as well as an observer.\n     *  Each notification is broadcasted to all subscribed observers.\n     */\n    export interface ISubject<T> extends IObservable<T>, IObserver<T>, IDisposable {\n        hasObservers(): boolean;\n    }\n\n    export interface Subject<T> extends Observable<T>, Observer<T>, IDisposable {\n        hasObservers(): boolean;\n        /** Is this value disposed. */\n        isDisposed: boolean;\n    }\n\n    interface SubjectStatic {\n        /**\n         * Creates a subject.\n         */\n        new <T>(): Subject<T>;\n\n        /**\n         * Creates a subject from the specified observer and observable.\n         * @param {Observer} observer The observer used to send messages to the subject.\n         * @param {Observable} observable The observable used to subscribe to messages sent from the subject.\n         * @returns {Subject} Subject implemented using the given observer and observable.\n         */\n        create<T>(observer?: IObserver<T>, observable?: IObservable<T>): Subject<T>;\n    }\n\n    /**\n     *  Represents an object that is both an observable sequence as well as an observer.\n     *  Each notification is broadcasted to all subscribed observers.\n     */\n    export var Subject: SubjectStatic;\n}\n\n(function() {\n    var is: Rx.ISubject<boolean> = new Rx.Subject<boolean>();\n    var s : Rx.Subject<boolean> = new Rx.Subject<boolean>();\n\n    is.hasObservers();\n    s.hasObservers();\n\n    s.isDisposed;\n\n    var iob : Rx.IObserver<boolean> = s;\n    var io : Rx.IObservable<boolean> = s;\n    var ob : Rx.Observer<boolean> = s;\n    var o : Rx.Observable<boolean> = s;\n    var d : Rx.IDisposable = s;\n\n    var ns : Rx.ISubject<boolean> = Rx.Subject.create(iob, io);\n    var ns : Rx.ISubject<boolean> = Rx.Subject.create(ob, o);\n});\n"],"sourceRoot":"/source/"}