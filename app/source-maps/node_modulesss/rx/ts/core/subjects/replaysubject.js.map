{"version":3,"sources":["node_modulesss/rx/ts/core/subjects/replaysubject.ts"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,oDAAoD;AACpD,IAAO,EAAE,CAkBR;AAlBD,WAAO,EAAE;AAkBT,CAAC,EAlBM,EAAE,KAAF,EAAE,QAkBR;AAED,CAAC;IACG,IAAI,CAAC,GAA+B,IAAI,EAAE,CAAC,aAAa,EAAW,CAAC;IACpE,IAAI,CAAC,GAA+B,IAAI,EAAE,CAAC,aAAa,CAAU,EAAE,CAAC,CAAC;IACtE,IAAI,CAAC,GAA+B,IAAI,EAAE,CAAC,aAAa,CAAU,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1E,IAAI,CAAC,GAA+B,IAAI,EAAE,CAAC,aAAa,CAAU,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAClG,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/subjects/replaysubject.js","sourcesContent":["/// <reference path=\"./subject.ts\" />\n/// <reference path=\"../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ReplaySubject<T> extends Subject<T> { }\n\n    interface ReplaySubjectStatic {\n        /**\n         *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.\n         *  @param {Number} [bufferSize] Maximum element count of the replay buffer.\n         *  @param {Number} [windowSize] Maximum time length of the replay buffer.\n         *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.\n         */\n        new <T>(bufferSize?: number, window?: number, scheduler?: IScheduler): ReplaySubject<T>;\n    }\n\n    /**\n    * Represents an object that is both an observable sequence as well as an observer.\n    * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.\n    */\n    export var ReplaySubject: ReplaySubjectStatic;\n}\n\n(function() {\n    var s : Rx.ReplaySubject<boolean> = new Rx.ReplaySubject<boolean>();\n    var s : Rx.ReplaySubject<boolean> = new Rx.ReplaySubject<boolean>(10);\n    var s : Rx.ReplaySubject<boolean> = new Rx.ReplaySubject<boolean>(10, 10);\n    var s : Rx.ReplaySubject<boolean> = new Rx.ReplaySubject<boolean>(10, 10, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}