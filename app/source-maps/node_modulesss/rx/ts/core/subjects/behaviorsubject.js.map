{"version":3,"sources":["node_modulesss/rx/ts/core/subjects/behaviorsubject.ts"],"names":[],"mappings":"AAAA,qCAAqC;AAErC,IAAO,EAAE,CAyBR;AAzBD,WAAO,EAAE;AAyBT,CAAC,EAzBM,EAAE,KAAF,EAAE,QAyBR;AAED,CAAC;IACG,IAAI,CAAC,GAAiC,IAAI,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACpE,IAAI,CAAC,GAAa,CAAC,CAAC,QAAQ,EAAE,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/subjects/behaviorsubject.js","sourcesContent":["/// <reference path=\"./subject.ts\" />\n\nmodule Rx {\n    export interface BehaviorSubject<T> extends Subject<T> {\n        /**\n         * Gets the current value or throws an exception.\n         * Value is frozen after onCompleted is called.\n         * After onError is called always throws the specified exception.\n         * An exception is always thrown after dispose is called.\n         * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.\n         */\n        getValue(): T;\n    }\n\n    interface BehaviorSubjectStatic {\n        /**\n         *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.\n         *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.\n         */\n        new <T>(initialValue: T): BehaviorSubject<T>;\n    }\n\n    /**\n     *  Represents a value that changes over time.\n     *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.\n     */\n    export var BehaviorSubject: BehaviorSubjectStatic;\n}\n\n(function() {\n    var s : Rx.BehaviorSubject<boolean> = new Rx.BehaviorSubject(false);\n    var b : boolean = s.getValue();\n});\n"],"sourceRoot":"/source/"}