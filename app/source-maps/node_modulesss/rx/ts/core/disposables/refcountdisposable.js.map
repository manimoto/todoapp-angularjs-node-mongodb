{"version":3,"sources":["node_modulesss/rx/ts/core/disposables/refcountdisposable.ts"],"names":[],"mappings":"AAAA,wCAAwC;AACxC,IAAO,EAAE,CA6BR;AA7BD,WAAO,EAAE;AA6BT,CAAC,EA7BM,EAAE,KAAF,EAAE,QA6BR;AAED,CAAC;IACG,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,cAAO,CAAC,CAAC,CAAC;IACvC,IAAI,GAAG,GAAG,IAAI,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,GAAG,GAAG,CAAC,aAAa,EAAE,CAAC;IACxB,GAAG,CAAC,OAAO,EAAE,CAAC;IACd,GAAG,CAAC,UAAU,CAAC;AACnB,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/disposables/refcountdisposable.js","sourcesContent":["/// <reference path=\"./disposable.ts\" />\nmodule Rx {\n    /**\n     * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.\n     */\n    export interface RefCountDisposable extends Disposable {\n\n        /** Performs the task of cleaning up resources. */\n        dispose(): void;\n\n        /** Is this value disposed. */\n        isDisposed: boolean;\n\n        /**\n         * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.\n         * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.\n         */\n        getDisposable(): IDisposable;\n    }\n\n    interface RefCountDisposableStatic {\n        /**\n         * Initializes a new instance of the RefCountDisposable with the specified disposable.\n         * @constructor\n         * @param {Disposable} disposable Underlying disposable.\n         */\n        new(disposable: IDisposable): RefCountDisposable;\n    }\n\n    export var RefCountDisposable : RefCountDisposableStatic;\n}\n\n(function() {\n    var d = Rx.Disposable.create(() => {});\n    var rcd = new Rx.RefCountDisposable(d);\n    d = rcd.getDisposable();\n    rcd.dispose();\n    rcd.isDisposed;\n})\n"],"sourceRoot":"/source/"}