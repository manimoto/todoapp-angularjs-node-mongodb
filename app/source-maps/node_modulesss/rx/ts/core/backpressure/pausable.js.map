{"version":3,"sources":["node_modulesss/rx/ts/core/backpressure/pausable.ts"],"names":[],"mappings":"AAAA,oDAAoD;AAoBpD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEtB,CAAC,CAAC,KAAK,EAAE,CAAC;IACV,CAAC,CAAC,MAAM,EAAE,CAAC;AACf,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/backpressure/pausable.js","sourcesContent":["/// <reference path=\"../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n         * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.\n         * @example\n         * var pauser = new Rx.Subject();\n         * var source = Rx.Observable.interval(100).pausable(pauser);\n         * @param {Observable} pauser The observable sequence used to pause the underlying sequence.\n         * @returns {Observable} The observable sequence which is paused based upon the pauser.\n         */\n        pausable(pauser?: Observable<boolean>): PausableObservable<T>;\n    }\n\n    export interface PausableObservable<T> extends Observable<T> {\n        pause(): void;\n        resume(): void;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var b: Rx.Observable<boolean>;\n    var c = o.pausable();\n    var c = o.pausable(b);\n\n    c.pause();\n    c.resume();\n})\n"],"sourceRoot":"/source/"}