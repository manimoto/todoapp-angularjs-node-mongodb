{"version":3,"sources":["node_modulesss/rx/ts/core/backpressure/controlled.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,oDAAoD;AAoBpD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAEvB,IAAI,CAAC,GAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/backpressure/controlled.js","sourcesContent":["/// <reference path=\"../disposables/disposable.ts\" />\n/// <reference path=\"../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Attaches a controller to the observable sequence with the ability to queue.\n        * @example\n        * var source = Rx.Observable.interval(100).controlled();\n        * source.request(3); // Reads 3 values\n        * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request\n        * @param {Scheduler} scheduler determines how the requests will be scheduled\n        * @returns {Observable} The observable sequence which only propagates values on request.\n        */\n        controlled(enableQueue?: boolean, scheduler?: IScheduler): ControlledObservable<T>;\n    }\n\n    export interface ControlledObservable<T> extends Observable<T> {\n        request(numberOfItems?: number): IDisposable;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var c = o.controlled();\n\n    var d: Rx.IDisposable = c.request();\n    d = c.request();\n    d = c.request(5);\n});\n"],"sourceRoot":"/source/"}