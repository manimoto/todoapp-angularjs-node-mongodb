{"version":3,"sources":["node_modulesss/rx/ts/core/testing/reactivetest.ts"],"names":[],"mappings":"AAAA,0CAA0C;AAC1C,sCAAsC;AAEtC,IAAO,EAAE,CAsER;AAtED,WAAO,EAAE;AAsET,CAAC,EAtEM,EAAE,KAAF,EAAE,QAsER;AAED,CAAC;IACG,IAAI,CAAC,GAAY,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC;IACzC,IAAI,CAAC,GAAY,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC;IAC5C,IAAI,CAAC,GAAY,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC;IAE1C,IAAI,CAAC,GAAiB,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACzD,IAAI,CAAC,GAAiB,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,UAAC,CAAM,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IACrE,IAAI,CAAC,GAAiB,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACrE,IAAI,CAAC,GAAiB,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,CAAM,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IACrE,IAAI,CAAC,GAAiB,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAEvD,IAAI,CAAC,GAAqB,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACzD,IAAI,CAAC,GAAqB,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/testing/reactivetest.js","sourcesContent":["/// <reference path=\"./subscription.ts\" />\n/// <reference path=\"./recorded.ts\" />\n\nmodule Rx {\n    export var ReactiveTest: {\n        /** Default virtual time used for creation of observable sequences in unit tests. */\n        created: number;\n        /** Default virtual time used to subscribe to observable sequences in unit tests. */\n        subscribed: number;\n        /** Default virtual time used to dispose subscriptions in unit tests. */\n        disposed: number;\n\n        /**\n         * Factory method for an OnNext notification record at a given time with a given value or a predicate function.\n         *\n         * 1 - ReactiveTest.onNext(200, 42);\n         * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });\n         *\n         * @param ticks Recorded virtual time the OnNext notification occurs.\n         * @param value Recorded value stored in the OnNext notification or a predicate.\n         * @return Recorded OnNext notification.\n         */\n        onNext(ticks: number, value: any): Recorded;\n        /**\n         * Factory method for an OnNext notification record at a given time with a given value or a predicate function.\n         *\n         * 1 - ReactiveTest.onNext(200, 42);\n         * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });\n         *\n         * @param ticks Recorded virtual time the OnNext notification occurs.\n         * @param value Recorded value stored in the OnNext notification or a predicate.\n         * @return Recorded OnNext notification.\n         */\n        onNext(ticks: number, predicate: (value: any) => boolean): Recorded;\n        /**\n         * Factory method for an OnError notification record at a given time with a given error.\n         *\n         * 1 - ReactiveTest.onNext(200, new Error('error'));\n         * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });\n         *\n         * @param ticks Recorded virtual time the OnError notification occurs.\n         * @param exception Recorded exception stored in the OnError notification.\n         * @return Recorded OnError notification.\n         */\n        onError(ticks: number, exception: any): Recorded;\n        /**\n         * Factory method for an OnError notification record at a given time with a given error.\n         *\n         * 1 - ReactiveTest.onNext(200, new Error('error'));\n         * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });\n         *\n         * @param ticks Recorded virtual time the OnError notification occurs.\n         * @param exception Recorded exception stored in the OnError notification.\n         * @return Recorded OnError notification.\n         */\n        onError(ticks: number, predicate: (exception: any) => boolean): Recorded;\n        /**\n         * Factory method for an OnCompleted notification record at a given time.\n         *\n         * @param ticks Recorded virtual time the OnCompleted notification occurs.\n         * @return Recorded OnCompleted notification.\n         */\n        onCompleted(ticks: number): Recorded;\n\n        /**\n         * Factory method for a subscription record based on a given subscription and disposal time.\n         *\n         * @param start Virtual time indicating when the subscription was created.\n         * @param end Virtual time indicating when the subscription was disposed.\n         * @return Subscription object.\n         */\n        subscribe(subscribeAt: number, unsubscribeAt?: number): Subscription;\n    }\n}\n\n(function() {\n    var n : number = Rx.ReactiveTest.created;\n    var n : number = Rx.ReactiveTest.subscribed;\n    var n : number = Rx.ReactiveTest.disposed;\n\n    var r : Rx.Recorded = Rx.ReactiveTest.onNext(100, 'abc');\n    var r : Rx.Recorded = Rx.ReactiveTest.onNext(100, (v: any) => false);\n    var r : Rx.Recorded = Rx.ReactiveTest.onError(100, new Error('abc'));\n    var r : Rx.Recorded = Rx.ReactiveTest.onError(100, (v: any) => true);\n    var r : Rx.Recorded = Rx.ReactiveTest.onCompleted(100);\n\n    var s : Rx.Subscription = Rx.ReactiveTest.subscribe(100);\n    var s : Rx.Subscription = Rx.ReactiveTest.subscribe(100, 200);\n});\n"],"sourceRoot":"/source/"}