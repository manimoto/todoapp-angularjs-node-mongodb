{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/windowwithcount.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAgB3C,CAAC;IACG,IAAI,CAAyB,CAAC;IAE9B,IAAI,EAAE,GAA0C,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACtE,EAAE,GAAG,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/windowwithcount.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.\n        *\n        *  var res = xs.windowWithCount(10);\n        *  var res = xs.windowWithCount(10, 1);\n        * @param {Number} count Length of each window.\n        * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.\n        * @returns {Observable} An observable sequence of windows.\n        */\n        windowWithCount(count: number, skip?: number): Observable<Observable<T>>;\n    }\n}\n\n(function() {\n    var o : Rx.Observable<string>;\n\n    var so : Rx.Observable<Rx.Observable<string>> = o.windowWithTime(100);\n    so = o.windowWithCount(100, 5);\n});\n"],"sourceRoot":"/source/"}