{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/from.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAsBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAsB,CAAC;IAC3B,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;IACxC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,EAAE,CAAC,CAAC;IAC5C,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/from.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         * This method creates a new Observable sequence from an array-like or iterable object.\n         * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.\n         * @param {Function} [mapFn] Map function to call on every element of the array.\n         * @param {Any} [thisArg] The context to use calling the mapFn if provided.\n         * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.\n         */\n        from<T>(array: ArrayOrIterable<T>): Observable<T>;\n        /**\n         * This method creates a new Observable sequence from an array-like or iterable object.\n         * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.\n         * @param {Function} [mapFn] Map function to call on every element of the array.\n         * @param {Any} [thisArg] The context to use calling the mapFn if provided.\n         * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.\n         */\n        from<T, TResult>(array: ArrayOrIterable<T>, mapFn: (value: T, index: number) => TResult, thisArg?: any, scheduler?: IScheduler): Observable<TResult>;\n    }\n}\n\n(function () {\n    var a : Rx.Observable<string>;\n    var b : Rx.Promise<string>;\n    Rx.Observable.from([1,2,3]);\n    Rx.Observable.from([1,2,3], x => x + 1);\n    Rx.Observable.from([1,2,3], x => x + 1, {});\n    Rx.Observable.from([1,2,3], x => x + 1, {}, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}