{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/tomap.ts"],"names":[],"mappings":"AAAA,4CAA4C","file":"node_modulesss/rx/ts/core/linq/observable/tomap.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Converts the observable sequence to a Map if it exists.\n        * @param {Function} keySelector A function which produces the key for the Map.\n        * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.\n        * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.\n        */\n        toMap<TKey>(keySelector: (value: T) => TKey): Observable<Map<TKey, T>>;\n        /**\n        * Converts the observable sequence to a Map if it exists.\n        * @param {Function} keySelector A function which produces the key for the Map.\n        * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.\n        * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.\n        */\n        toMap<TKey, TElement>(keySelector: (value: T) => TKey, elementSelector: (value: T) => TElement): Observable<Map<TKey, TElement>>;\n    }\n}\n"],"sourceRoot":"/source/"}