{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/let.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAc5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAyB,CAAC;IAC9B,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/let.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.\n        *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.\n        *\n        * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.\n        * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n        */\n        let<TResult>(selector: (source: Observable<T>) => Observable<TResult>): Observable<TResult>;\n    }\n}\n\n(function () {\n    var a : Rx.Observable<string>;\n    var b : Rx.Observable<number>;\n    a.let(x => x.concat(Rx.Observable.just('a')));\n});\n"],"sourceRoot":"/source/"}