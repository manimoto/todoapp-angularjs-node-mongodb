{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/onerrorresumenextproto.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAY5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAqB,CAAC;IAC1B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/onerrorresumenextproto.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.\n        * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.\n        * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.\n        */\n        onErrorResumeNext(second: ObservableOrPromise<T>): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n    var p: Rx.Promise<number>;\n    o = o.onErrorResumeNext(p);\n    o = o.onErrorResumeNext(o);\n});\n"],"sourceRoot":"/source/"}