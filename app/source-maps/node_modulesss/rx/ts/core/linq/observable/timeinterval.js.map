{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/timeinterval.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAsBvD,CAAC;IACA,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAA0C,CAAC;IAE/C,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/timeinterval.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n\texport interface TimeInterval<T> {\n\t\tvalue: T;\n\t\tinterval: number;\n\t}\n\n    export interface Observable<T> {\n        /**\n        *  Records the time interval between consecutive values in an observable sequence.\n        *\n        * @example\n        *  1 - res = source.timeInterval();\n        *  2 - res = source.timeInterval(Rx.Scheduler.timeout);\n        *\n        * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.\n        * @returns {Observable} An observable sequence with time interval information on values.\n        */\n        timeInterval(scheduler?: IScheduler): Observable<TimeInterval<T>>;\n    }\n}\n\n(function () {\n\tvar o : Rx.Observable<string>;\n\tvar t : Rx.Observable<Rx.TimeInterval<string>>;\n\n\tt = o.timeInterval(Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}