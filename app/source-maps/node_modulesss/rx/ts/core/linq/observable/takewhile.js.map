{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takewhile.ts"],"names":[],"mappings":"AAAA,2CAA2C","file":"node_modulesss/rx/ts/core/linq/observable/takewhile.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns elements from an observable sequence as long as a specified condition is true.\n        *  The element's index is used in the logic of the predicate function.\n        * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.\n        */\n        takeWhile(predicate: _Predicate<T>, thisArg?: any): Observable<T>;\n    }\n}\n"],"sourceRoot":"/source/"}