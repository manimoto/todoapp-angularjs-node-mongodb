{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/timer.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAuBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/timer.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.\n         * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.\n         * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.\n         * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.\n         * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.\n         */\n        timer(dueTime: number, period: number, scheduler?: IScheduler): Observable<number>;\n        /**\n         *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.\n         * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.\n         * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.\n         * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.\n         * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.\n         */\n        timer(dueTime: number, scheduler?: IScheduler): Observable<number>;\n    }\n}\n\n\n(function () {\n    var o : Rx.Observable<number>;\n    o = Rx.Observable.timer(100);\n    o = Rx.Observable.timer(100, 100);\n    o = Rx.Observable.timer(100, 100, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}