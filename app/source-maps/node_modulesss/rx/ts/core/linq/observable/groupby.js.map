{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/groupby.ts"],"names":[],"mappings":"AAAA,0CAA0C","file":"node_modulesss/rx/ts/core/linq/observable/groupby.js","sourcesContent":["/// <reference path=\"./groupbyuntil.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n         *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.\n         *\n         * @example\n         *  var res = observable.groupBy(function (x) { return x.id; });\n         *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });\n         *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });\n         * @param {Function} keySelector A function to extract the key for each element.\n         * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.\n         * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.\n         */\n        groupBy<TKey, TElement>(keySelector: (value: T) => TKey, skipElementSelector?: boolean, keySerializer?: (key: TKey) => string): Observable<GroupedObservable<TKey, T>>;\n        /**\n         *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.\n         *\n         * @example\n         *  var res = observable.groupBy(function (x) { return x.id; });\n         *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });\n         *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });\n         * @param {Function} keySelector A function to extract the key for each element.\n         * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.\n         * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.\n         */\n        groupBy<TKey, TElement>(keySelector: (value: T) => TKey, elementSelector: (value: T) => TElement, keySerializer?: (key: TKey) => string): Observable<GroupedObservable<TKey, TElement>>;\n    }\n}\n"],"sourceRoot":"/source/"}