{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/bufferwithcount.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAa5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAE9B,IAAI,EAAE,GAA6B,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAC1D,EAAE,GAAG,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/bufferwithcount.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.\n        * @param {Number} count Length of each buffer.\n        * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.\n        * @returns {Observable} An observable sequence of buffers.\n        */\n        bufferWithCount(count: number, skip?: number): Observable<T[]>;\n    }\n}\n\n(function() {\n    var o : Rx.Observable<string>;\n\n    var so : Rx.Observable<string[]> = o.bufferWithCount(100);\n    so = o.bufferWithCount(100, 5);\n});\n"],"sourceRoot":"/source/"}