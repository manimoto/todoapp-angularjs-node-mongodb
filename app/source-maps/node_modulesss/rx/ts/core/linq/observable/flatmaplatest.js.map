{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/flatmaplatest.ts"],"names":[],"mappings":"AAAA,4CAA4C;AA+E5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACxD,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAzC,CAAyC,CAAC,CAAC;IACpE,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;IACpC,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAA7B,CAA6B,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IACrE,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAzC,CAAyC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IACjF,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAT,CAAS,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IACjD,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC/D,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAChE,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC5E,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAE5C,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACvD,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAzC,CAAyC,CAAC,CAAC;IACnE,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;IACnC,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAA7B,CAA6B,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IACpE,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAzC,CAAyC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAChF,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAT,CAAS,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAChD,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9D,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC/D,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC3E,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/flatmaplatest.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        selectSwitch<TResult>(selector: _ValueOrSelector<T, ObservableOrPromise<TResult>>): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        selectSwitch<TResult>(selector: _ValueOrSelector<T, ArrayOrIterable<TResult>>): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        selectSwitch<TOther, TResult>(selector: _ValueOrSelector<T, ObservableOrPromise<TOther>>, resultSelector: special._FlatMapResultSelector<T, TOther, TResult>, thisArg?: any): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        selectSwitch<TOther, TResult>(selector: _ValueOrSelector<T, ArrayOrIterable<TOther>>, resultSelector: special._FlatMapResultSelector<T, TOther, TResult>, thisArg?: any): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        flatMapLatest<TResult>(selector: _ValueOrSelector<T, ObservableOrPromise<TResult>>): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        flatMapLatest<TResult>(selector: _ValueOrSelector<T, ArrayOrIterable<TResult>>): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        flatMapLatest<TOther, TResult>(selector: _ValueOrSelector<T, ObservableOrPromise<TOther>>, resultSelector: special._FlatMapResultSelector<T, TOther, TResult>, thisArg?: any): Observable<TResult>;\n        /**\n        *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then\n        *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n        * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences\n        *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n        */\n        flatMapLatest<TOther, TResult>(selector: _ValueOrSelector<T, ArrayOrIterable<TOther>>, resultSelector: special._FlatMapResultSelector<T, TOther, TResult>, thisArg?: any): Observable<TResult>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<string>;\n    var n: Rx.Observable<number>;\n    n = o.flatMapLatest(x => Rx.Observable.from([1, 2, 3]));\n    n = o.flatMapLatest(x => Rx.Observable.from([1, 2, 3]).toPromise());\n    n = o.flatMapLatest(x => [1, 2, 3]);\n    n = o.flatMapLatest(x => Rx.Observable.from([1, 2, 3]), (x, y) => y);\n    n = o.flatMapLatest(x => Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);\n    n = o.flatMapLatest(x => [1, 2, 3], (x, y) => y);\n    n = o.flatMapLatest(Rx.Observable.from([1, 2, 3]));\n    n = o.flatMapLatest(Rx.Observable.from([1, 2, 3]).toPromise());\n    n = o.flatMapLatest([1, 2, 3]);\n    n = o.flatMapLatest(Rx.Observable.from([1, 2, 3]), (x, y) => y);\n    n = o.flatMapLatest(Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);\n    n = o.flatMapLatest([1, 2, 3], (x, y) => y);\n\n    n = o.selectSwitch(x => Rx.Observable.from([1, 2, 3]));\n    n = o.selectSwitch(x => Rx.Observable.from([1, 2, 3]).toPromise());\n    n = o.selectSwitch(x => [1, 2, 3]);\n    n = o.selectSwitch(x => Rx.Observable.from([1, 2, 3]), (x, y) => y);\n    n = o.selectSwitch(x => Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);\n    n = o.selectSwitch(x => [1, 2, 3], (x, y) => y);\n    n = o.selectSwitch(Rx.Observable.from([1, 2, 3]));\n    n = o.selectSwitch(Rx.Observable.from([1, 2, 3]).toPromise());\n    n = o.selectSwitch([1, 2, 3]);\n    n = o.selectSwitch(Rx.Observable.from([1, 2, 3]), (x, y) => y);\n    n = o.selectSwitch(Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);\n    n = o.selectSwitch([1, 2, 3], (x, y) => y);\n});\n"],"sourceRoot":"/source/"}