{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/distinctuntilchanged.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAkB5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;IAC1C,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/distinctuntilchanged.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.\n        *\n        *  var obs = observable.distinctUntilChanged();\n        *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });\n        *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });\n        *\n        * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.\n        * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.\n        * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.\n        */\n        distinctUntilChanged<TValue>(keySelector?: (value: T) => TValue, comparer?: _Comparer<TValue, boolean>): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n    o = o.distinctUntilChanged();\n    o = o.distinctUntilChanged(x => x.length);\n    o = o.distinctUntilChanged(x => x.length, (x, y) => true);\n});\n"],"sourceRoot":"/source/"}