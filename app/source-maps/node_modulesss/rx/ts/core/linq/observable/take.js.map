{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/take.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAiBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/take.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).\n        *\n        *  var res = source.take(5);\n        *  var res = source.take(0, Rx.Scheduler.timeout);\n        * @param {Number} count The number of elements to return.\n        * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name=\"count count</paramref> is set to 0.\n        * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.\n        */\n        take(count: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.take(1, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}