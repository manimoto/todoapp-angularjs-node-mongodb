{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/using.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAa3C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAiB,CAAC;IACtB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,EAAE,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/using.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.\n         * @param {Function} resourceFactory Factory function to obtain a resource object.\n         * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.\n         * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.\n         */\n        using<TSource, TResource extends IDisposable>(resourceFactory: () => TResource, observableFactory: (resource: TResource) => Observable<TSource>): Observable<TSource>;\n    }\n}\n\n(function () {\n    var s : Rx.Observable<string>;\n    var r : Rx.Disposable;\n    s = Rx.Observable.using(() => r, () => s);\n});\n"],"sourceRoot":"/source/"}