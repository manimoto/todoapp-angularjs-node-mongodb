{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/reduce.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAsB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAE7B,CAAC,GAAG,CAAC,CAAC,MAAM,CAAS,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;IACtC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/reduce.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n         * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.\n         * For aggregation behavior with incremental intermediate results, see Observable.scan.\n         * @param {Function} accumulator An accumulator function to be invoked on each element.\n         * @param {Any} [seed] The initial accumulator value.\n         * @returns {Observable} An observable sequence containing a single element with the final accumulator value.\n         */\n        reduce<TAcc>(accumulator: _Accumulator<T, TAcc>, seed?: TAcc): Observable<TAcc>;\n        /**\n         * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.\n         * For aggregation behavior with incremental intermediate results, see Observable.scan.\n         * @param {Function} accumulator An accumulator function to be invoked on each element.\n         * @param {Any} [seed] The initial accumulator value.\n         * @returns {Observable} An observable sequence containing a single element with the final accumulator value.\n         */\n        reduce(accumulator: _Accumulator<T, T>, seed?: T): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n\n    o = o.reduce<number>((a, x) => a * x);\n    o = o.reduce((a, x) => a * x, 1);\n});\n"],"sourceRoot":"/source/"}