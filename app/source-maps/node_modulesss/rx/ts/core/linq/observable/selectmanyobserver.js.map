{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/selectmanyobserver.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAyB3C,CAAC;IACG,IAAI,EAAyB,CAAC;IAC9B,IAAI,EAAyB,CAAC;IAE9B,EAAE,CAAC,eAAe,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,UAAC,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAArB,CAAqB,CAAC,CAAC;IAC/G,EAAE,CAAC,kBAAkB,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,UAAC,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAArB,CAAqB,CAAC,CAAC;IAElH,EAAE,CAAC,eAAe,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,UAAC,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAArB,CAAqB,EAAE,EAAE,CAAC,CAAC;IACnH,EAAE,CAAC,kBAAkB,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,UAAC,CAAC,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAArB,CAAqB,EAAE,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAArB,CAAqB,EAAE,EAAE,CAAC,CAAC;AAC1H,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/selectmanyobserver.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.\n        * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.\n        * @param {Function} onError A transform function to apply when an error occurs in the source sequence.\n        * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.\n        * @param {Any} [thisArg] An optional \"this\" to use to invoke each transform.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.\n        */\n        selectManyObserver<T2, T3, T4>(onNext: (value: T, index: number) => Observable<T2>, onError: (exception: any) => Observable<T3>, onCompleted: () => Observable<T4>, thisArg?: any): Observable<T2 | T3 | T4>;\n        /**\n        * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.\n        * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.\n        * @param {Function} onError A transform function to apply when an error occurs in the source sequence.\n        * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.\n        * @param {Any} [thisArg] An optional \"this\" to use to invoke each transform.\n        * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.\n        */\n        flatMapObserver<T2, T3, T4>(onNext: (value: T, index: number) => Observable<T2>, onError: (exception: any) => Observable<T3>, onCompleted: () => Observable<T4>, thisArg?: any): Observable<T2 | T3 | T4>;\n    }\n}\n\n\n(function() {\n    var os: Rx.Observable<string>;\n    var on: Rx.Observable<number>;\n\n    os.flatMapObserver((v, i) => Rx.Observable.just(i), (e) => Rx.Observable.just(e), () => Rx.Observable.empty());\n    os.selectManyObserver((v, i) => Rx.Observable.just(i), (e) => Rx.Observable.just(e), () => Rx.Observable.empty());\n\n    os.flatMapObserver((v, i) => Rx.Observable.just(i), (e) => Rx.Observable.just(e), () => Rx.Observable.empty(), {});\n    os.selectManyObserver((v, i) => Rx.Observable.just(i), (e) => Rx.Observable.just(e), () => Rx.Observable.empty(), {});\n});\n"],"sourceRoot":"/source/"}