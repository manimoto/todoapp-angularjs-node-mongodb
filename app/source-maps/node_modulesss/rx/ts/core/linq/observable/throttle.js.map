{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/throttle.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAcvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/throttle.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.\n        * @param {Number} windowDuration time to wait before emitting another item after emitting the last item\n        * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.\n        * @returns {Observable} An Observable that performs the throttle operation.\n        */\n        throttle(windowDuration: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function () {\n    var o: Rx.Observable<string>;\n    o.throttle(100);\n    o.throttle(100, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}