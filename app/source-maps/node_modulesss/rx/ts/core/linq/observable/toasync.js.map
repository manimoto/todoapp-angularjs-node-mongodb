{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/toasync.ts"],"names":[],"mappings":"AAAA,2CAA2C;AA+C3C,CAAC;IACG,IAAI,CAA8B,CAAC;IACnC,IAAI,EAAqC,CAAC;IAC1C,IAAI,EAA6C,CAAC;IAClD,IAAI,EAAqD,CAAC;IAC1D,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IACvC,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IACzC,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IAC5C,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IAC/C,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAEnE,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/toasync.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n        * @param {Function} function Function to convert to an asynchronous function.\n        * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Function} Asynchronous function.\n        */\n        toAsync<TResult>(func: () => TResult, context?: any, scheduler?: IScheduler): () => Observable<TResult>;\n        /**\n        * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n        * @param {Function} function Function to convert to an asynchronous function.\n        * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Function} Asynchronous function.\n        */\n        toAsync<T1, TResult>(func: (arg1: T1) => TResult, context?: any, scheduler?: IScheduler): (arg1: T1) => Observable<TResult>;\n        /**\n        * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n        * @param {Function} function Function to convert to an asynchronous function.\n        * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Function} Asynchronous function.\n        */\n        toAsync<T1, T2, TResult>(func: (arg1: T1, arg2: T2) => TResult, context?: any, scheduler?: IScheduler): (arg1: T1, arg2: T2) => Observable<TResult>;\n        /**\n        * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n        * @param {Function} function Function to convert to an asynchronous function.\n        * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Function} Asynchronous function.\n        */\n        toAsync<T1, T2, T3, TResult>(func: (arg1: T1, arg2: T2, arg3: T3) => TResult, context?: any, scheduler?: IScheduler): (arg1: T1, arg2: T2, arg3: T3) => Observable<TResult>;\n        /**\n        * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n        * @param {Function} function Function to convert to an asynchronous function.\n        * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Function} Asynchronous function.\n        */\n        toAsync<T1, T2, T3, T4, TResult>(func: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => TResult, context?: any, scheduler?: IScheduler): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Observable<TResult>;\n    }\n}\n\n\n(function() {\n    var o: () => Rx.Observable<string>;\n    var o2: (a: any) => Rx.Observable<string>;\n    var o3: (a: any, b: any) => Rx.Observable<string>;\n    var o4: (a: any, b: any, c: any) => Rx.Observable<string>;\n    o = Rx.Observable.toAsync(() => 'abc');\n    o2 = Rx.Observable.toAsync((a) => 'abc');\n    o3 = Rx.Observable.toAsync((a, b) => 'abc');\n    o4 = Rx.Observable.toAsync((a, b, c) => 'abc');\n    o = Rx.Observable.toAsync(() => 'abc', {}, Rx.Scheduler.async);\n\n});\n"],"sourceRoot":"/source/"}