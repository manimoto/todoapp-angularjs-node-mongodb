{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/observeon.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAgBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/observeon.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.\n        *\n        *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects\n        *  that require to be run on a scheduler, use subscribeOn.\n        *\n        *  @param {Scheduler} scheduler Scheduler to notify observers on.\n        *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.\n        */\n        observeOn(scheduler: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n    o = o.observeOn(Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}