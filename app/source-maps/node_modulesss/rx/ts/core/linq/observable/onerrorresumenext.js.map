{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/onerrorresumenext.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAwB5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAqB,CAAC;IAC1B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/onerrorresumenext.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.\n        *\n        * @example\n        * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);\n        * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);\n        * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.\n        */\n        onErrorResumeNext<T>(...sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.\n        *\n        * @example\n        * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);\n        * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);\n        * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.\n        */\n        onErrorResumeNext<T>(sources: ObservableOrPromise<T>[]): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n    var p: Rx.Promise<number>;\n    o = Rx.Observable.onErrorResumeNext(o, p, o, p);\n    o = Rx.Observable.onErrorResumeNext([o, p, o, p]);\n});\n"],"sourceRoot":"/source/"}