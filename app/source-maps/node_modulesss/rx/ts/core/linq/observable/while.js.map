{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/while.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAwB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAE7B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/while.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Repeats source as long as condition holds emulating a while loop.\n        * There is an alias for this method called 'whileDo' for browsers <IE9\n        *\n        * @param {Function} condition The condition which determines if the source will be repeated.\n        * @param {Observable} source The observable sequence that will be run if the condition function returns true.\n        * @returns {Observable} An observable sequence which is repeated as long as the condition holds.\n        */\n        while<T>(condition: () => boolean, source: ObservableOrPromise<T>): Observable<T>;\n        /**\n        *  Repeats source as long as condition holds emulating a while loop.\n        * There is an alias for this method called 'whileDo' for browsers <IE9\n        *\n        * @param {Function} condition The condition which determines if the source will be repeated.\n        * @param {Observable} source The observable sequence that will be run if the condition function returns true.\n        * @returns {Observable} An observable sequence which is repeated as long as the condition holds.\n        */\n        whileDo<T>(condition: () => boolean, source: ObservableOrPromise<T>): Observable<T>;\n    }\n}\n\n(function () {\n    var o :Rx.Observable<number>;\n\n    o = Rx.Observable.while(() => true, Rx.Observable.just(1));\n});\n"],"sourceRoot":"/source/"}