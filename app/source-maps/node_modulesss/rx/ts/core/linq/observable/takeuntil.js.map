{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takeuntil.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAa3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAyB,CAAC;IAE9B,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/takeuntil.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns the values from the source observable sequence until the other observable sequence produces a value.\n        * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.\n        * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.\n        */\n        takeUntil<T2>(other: ObservableOrPromise<T2>): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    var o2: Rx.Observable<number>;\n\n    o = o.skipUntil(o2);\n});\n"],"sourceRoot":"/source/"}