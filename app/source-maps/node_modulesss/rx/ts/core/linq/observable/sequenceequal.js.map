{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/sequenceequal.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAgC3C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,EAA0B,CAAC;IAC/B,IAAI,CAA0B,CAAC;IAC/B,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/sequenceequal.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.\n        *\n        * @example\n        * var res = res = source.sequenceEqual([1,2,3]);\n        * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });\n        * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));\n        * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });\n        * @param {Observable} second Second observable sequence or array to compare.\n        * @param {Function} [comparer] Comparer used to compare elements of both sequences.\n        * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.\n        */\n        sequenceEqual(second: ObservableOrPromise<T> | ArrayOrIterable<T>, comparer?: _Comparer<T, boolean>): Observable<boolean>;\n        /**\n        *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.\n        *\n        * @example\n        * var res = res = source.sequenceEqual([1,2,3]);\n        * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });\n        * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));\n        * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });\n        * @param {Observable} second Second observable sequence or array to compare.\n        * @param {Function} [comparer] Comparer used to compare elements of both sequences.\n        * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.\n        */\n        sequenceEqual<TOther>(second: ObservableOrPromise<T> | ArrayOrIterable<T>, comparer: _Comparer<T | TOther, boolean>): Observable<boolean>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n    var o2 : Rx.Observable<string>;\n    var b : Rx.Observable<boolean>;\n    b = o.sequenceEqual(o2);\n});\n"],"sourceRoot":"/source/"}