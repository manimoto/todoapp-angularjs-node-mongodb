{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/retrywhen.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAkB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,SAAS,CAAC,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/retrywhen.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n         *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates.\n         *  if the notifier completes, the observable sequence completes.\n         *\n         * @example\n         *  var timer = Observable.timer(500);\n         *  var source = observable.retryWhen(timer);\n         * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.\n         * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.\n         */\n        retryWhen(notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o.retryWhen(() => Rx.Observable.of(1));\n});\n"],"sourceRoot":"/source/"}