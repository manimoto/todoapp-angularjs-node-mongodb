{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/forkjoinproto.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAc5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC/B,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/forkjoinproto.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Runs two observable sequences in parallel and combines their last elemenets.\n        *\n        * @param {Observable} second Second observable sequence.\n        * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.\n        * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.\n        */\n        forkJoin<TSecond, TResult>(second: ObservableOrPromise<TSecond>, resultSelector: (left: T, right: TSecond) => TResult): Observable<TResult>;\n    }\n}\n\n(function () {\n    var a : Rx.Observable<string>;\n    var b : Rx.Observable<number>;\n    a = a.forkJoin(b, (a, b) => a);\n    b = a.forkJoin(b, (a, b) => b);\n});\n"],"sourceRoot":"/source/"}