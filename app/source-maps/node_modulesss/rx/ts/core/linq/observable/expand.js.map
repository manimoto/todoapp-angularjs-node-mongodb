{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/expand.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAcvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;IAC/C,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAA3B,CAA2B,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/expand.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Expands an observable sequence by recursively invoking selector.\n        *\n        * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.\n        * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.\n        * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.\n        */\n        expand(selector: (item: T) => Observable<T>, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<number>;\n    o = o.expand(i => Rx.Observable.return(i + 1));\n    o = o.expand(i => Rx.Observable.return(i + 1), Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}