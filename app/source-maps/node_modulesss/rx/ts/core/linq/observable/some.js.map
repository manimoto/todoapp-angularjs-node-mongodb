{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/some.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAa3C,CAAC;IACG,IAAI,EAA0B,CAAC;IAC/B,IAAI,EAA0B,CAAC;IAE/B,EAAE,CAAC,IAAI,EAAE,CAAC;IACV,EAAE,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;IAC3B,EAAE,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,EAAJ,CAAI,EAAE,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/some.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.\n        * @param {Function} [predicate] A function to test each element for a condition.\n        * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.\n        */\n        some(predicate?: _Predicate<T>, thisArg?: any): Observable<boolean>;\t// alias for any\n    }\n}\n\n\n(function () {\n    var os : Rx.Observable<string>;\n    var on : Rx.Observable<number>;\n\n    on.some();\n    os.some((v, i, s) => true);\n    os.some((v, i, s) => true, {});\n});\n"],"sourceRoot":"/source/"}