{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takewithtime.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAqBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/takewithtime.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.\n        *\n        * @example\n        *  1 - res = source.takeWithTime(5000,  [optional scheduler]);\n        * @description\n        *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.\n        *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the\n        *  result sequence. This causes elements to be delayed with duration.\n        * @param {Number} duration Duration for taking elements from the start of the sequence.\n        * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n        * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.\n        */\n        takeWithTime(duration: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.takeWithTime(1);\n    o = o.takeWithTime(100, Rx.Scheduler.default);\n});\n"],"sourceRoot":"/source/"}