{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/buffer.ts"],"names":[],"mappings":"AAAA,4CAA4C;AA2B5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,IAA6B,CAAC;IAElC,IAAI,EAAE,GAA6B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClD,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAxB,CAAwB,CAAC,CAAC;IAC9C,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,cAAM,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAxB,CAAwB,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/buffer.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Projects each element of an observable sequence into zero or more buffers.\n        *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).\n        *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.\n        *  @returns {Observable} An observable sequence of windows.\n        */\n        buffer<TBufferOpening>(bufferOpenings: Observable<TBufferOpening>): Observable<T[]>;\n        /**\n        *  Projects each element of an observable sequence into zero or more buffers.\n        *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).\n        *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.\n        *  @returns {Observable} An observable sequence of windows.\n        */\n        buffer<TBufferClosing>(bufferClosingSelector: () => Observable<TBufferClosing>): Observable<T[]>;\n        /**\n        *  Projects each element of an observable sequence into zero or more buffers.\n        *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).\n        *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.\n        *  @returns {Observable} An observable sequence of windows.\n        */\n        buffer<TBufferOpening, TBufferClosing>(bufferOpenings: Observable<TBufferOpening>, bufferClosingSelector: () => Observable<TBufferClosing>): Observable<T[]>;\n    }\n}\n\n(function() {\n    var o : Rx.Observable<string>;\n    var open : Rx.Observable<boolean>;\n\n    var so : Rx.Observable<string[]> = o.buffer(open);\n    so = o.buffer(() => Rx.Observable.timer(100));\n    so = o.buffer(open, () => Rx.Observable.timer(100));\n});\n"],"sourceRoot":"/source/"}