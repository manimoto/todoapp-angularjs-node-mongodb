{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/catchproto.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAkB5C,CAAC;IAEG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAA0B,CAAC;IAC/B,IAAI,CAAqB,CAAC;IAE1B,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IACtB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAK,OAAA,EAAE,EAAF,CAAE,CAAC,CAAC;IACvB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAEtB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/catchproto.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n        * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.\n        * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.\n        */\n        catch(handler: (exception: any) => ObservableOrPromise<T>): Observable<T>;\n        /**\n        * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n        * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.\n        * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.\n        */\n        catch(second: ObservableOrPromise<T>): Observable<T>;\n    }\n}\n\n(function() {\n\n    var o: Rx.Observable<string>;\n    var io: Rx.IObservable<string>;\n    var p: Rx.Promise<string>;\n\n    o = o.catch((e) => o);\n    o = o.catch((e) => io);\n    o = o.catch((e) => p);\n\n    o = o.catch(o);\n    o = o.catch(io);\n    o = o.catch(p);\n});\n"],"sourceRoot":"/source/"}