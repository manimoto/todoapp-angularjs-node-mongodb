{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takelastbuffer.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAiB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAA2B,CAAC;IAChC,EAAE,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/takelastbuffer.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.\n        *\n        * @description\n        *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the\n        *  source sequence, this buffer is produced on the result sequence.\n        * @param {Number} count Number of elements to take from the end of the source sequence.\n        * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.\n        */\n        takeLastBuffer(count: number): Observable<T[]>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    var o2: Rx.Observable<number[]>;\n    o2 = o.takeLastBuffer(1);\n});\n"],"sourceRoot":"/source/"}