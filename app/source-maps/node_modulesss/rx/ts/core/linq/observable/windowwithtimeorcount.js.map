{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/windowwithtimeorcount.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAcvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAE,GAAyC,CAAC,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACjF,IAAI,EAAE,GAAyC,CAAC,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAC3G,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/windowwithtimeorcount.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.\n        * @param {Number} timeSpan Maximum time length of a window.\n        * @param {Number} count Maximum element count of a window.\n        * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} An observable sequence of windows.\n        */\n        windowWithTimeOrCount(timeSpan: number, count: number, scheduler?: IScheduler): Observable<Observable<T>>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var so: Rx.Observable<Rx.Observable<string>> = o.windowWithTimeOrCount(100, 200);\n    var so: Rx.Observable<Rx.Observable<string>> = o.windowWithTimeOrCount(100, 200, Rx.Scheduler.default);\n});\n"],"sourceRoot":"/source/"}