{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/catch.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAkB5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,EAA2B,CAAC;IAChC,IAAI,CAAsB,CAAC;IAE3B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACzB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC,GAAG,CAAA,KAAA,EAAE,CAAC,UAAU,CAAA,CAAC,KAAK,WAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;AAC/B,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/catch.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n        * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.\n        * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.\n        */\n        catch<T>(sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n        * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.\n        * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.\n        */\n        catch<T>(...sources: ObservableOrPromise<T>[]): Observable<T>;\n    }\n}\n\n(function() {\n    var o : Rx.Observable<string>;\n    var io : Rx.IObservable<string>;\n    var p : Rx.Promise<string>;\n\n    var t = [o, p, o, p, io];\n    o = Rx.Observable.catch(o, p, o, p, io);\n    o = Rx.Observable.catch(...t);\n    o = Rx.Observable.catch(t);\n});\n"],"sourceRoot":"/source/"}