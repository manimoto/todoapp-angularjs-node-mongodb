{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/multicast.ts"],"names":[],"mappings":"AAAA,kDAAkD;AAClD,oDAAoD;AA0CpD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAoC,CAAC;IACzC,IAAI,EAAuB,CAAC;IAC5B,IAAI,CAAqB,CAAC;IAC1B,IAAI,CAAwB,CAAC;IAE7B,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACrB,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACpB,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAE1B,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC3C,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC1C,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,EAAE,EAAhB,CAAgB,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/multicast.js","sourcesContent":["/// <reference path=\"../../subjects/subject.ts\" />\n/// <reference path=\"../connectableobservable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each\n        * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's\n        * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.\n        *\n        * @example\n        * 1 - res = source.multicast(observable);\n        * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });\n        *\n        * @param {Function|Subject} subjectOrSubjectSelector\n        * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.\n        * Or:\n        * Subject to push source elements into.\n        *\n        * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name=\"subjectOrSubjectSelector\" is a factory function.\n        * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n        */\n        multicast(subject: ISubject<T> | (() => ISubject<T>)): ConnectableObservable<T>;\n        /**\n        * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each\n        * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's\n        * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.\n        *\n        * @example\n        * 1 - res = source.multicast(observable);\n        * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });\n        *\n        * @param {Function|Subject} subjectOrSubjectSelector\n        * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.\n        * Or:\n        * Subject to push source elements into.\n        *\n        * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name=\"subjectOrSubjectSelector\" is a factory function.\n        * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n        */\n        multicast<TResult>(subjectSelector: ISubject<T> | (() => ISubject<T>), selector: (source: ConnectableObservable<T>) => Observable<T>): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n    var oc: Rx.ConnectableObservable<number>;\n    var is: Rx.ISubject<number>;\n    var s: Rx.Subject<number>;\n    var a: Rx.Observable<string>;\n\n    oc = o.multicast(is);\n    oc = o.multicast(s);\n    oc = o.multicast(() => s);\n\n    o = o.multicast(is, a => a.asObservable());\n    o = o.multicast(s, a => a.asObservable());\n    o = o.multicast(() => s, a => a.asObservable());\n});\n"],"sourceRoot":"/source/"}