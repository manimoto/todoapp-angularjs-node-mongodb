{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/skiplast.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAgB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/skiplast.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Bypasses a specified number of elements at the end of an observable sequence.\n        * @description\n        *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are\n        *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.\n        * @param count Number of elements to bypass at the end of the source sequence.\n        * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.\n        */\n        skipLast(count: number): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.skipLast(1);\n});\n"],"sourceRoot":"/source/"}