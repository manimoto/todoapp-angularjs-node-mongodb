{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/min.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAe5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACZ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAnB,CAAmB,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/min.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.\n        * @example\n        * var res = source.min();\n        * var res = source.min(function (x, y) { return x.value - y.value; });\n        * @param {Function} [comparer] Comparer used to compare elements.\n        * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.\n        */\n        min(comparer?: _Comparer<T, number>): Observable<number>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<number>;\n    var a : Rx.Observable<string>;\n    o = o.min();\n    o = a.min((x, y) => x.length - y.length);\n});\n"],"sourceRoot":"/source/"}