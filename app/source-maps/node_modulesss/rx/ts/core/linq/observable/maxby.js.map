{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/maxby.ts"],"names":[],"mappings":"AAAA,4CAA4C;AA0B5C,CAAC;IACG,IAAI,CAAiC,CAAC;IACtC,IAAI,CAAkC,CAAC;IACvC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;IAC1B,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAnB,CAAmB,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/maxby.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.\n        * @example\n        * var res = source.maxBy(function (x) { return x.value; });\n        * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });\n        * @param {Function} keySelector Key selector function.\n        * @param {Function} [comparer]  Comparer used to compare key values.\n        * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.\n        */\n        maxBy<TKey>(keySelector: (item: T) => TKey, comparer: _Comparer<TKey, number>): Observable<T>;\n        /**\n        * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.\n        * @example\n        * var res = source.maxBy(function (x) { return x.value; });\n        * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });\n        * @param {Function} keySelector Key selector function.\n        * @param {Function} [comparer]  Comparer used to compare key values.\n        * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.\n        */\n        maxBy(keySelector: (item: T) => number): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<{value:number}>;\n    var a : Rx.Observable<{value: string}>;\n    o = o.maxBy(x => x.value);\n    a = a.maxBy(x => x.value, (x, y) => x.length - y.length);\n});\n"],"sourceRoot":"/source/"}