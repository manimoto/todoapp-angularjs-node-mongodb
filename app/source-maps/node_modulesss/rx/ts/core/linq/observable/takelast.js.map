{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takelast.ts"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,2CAA2C;AAgB3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/takelast.js","sourcesContent":["/// <reference path=\"../../disposables/disposable.ts\" />\n/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns a specified number of contiguous elements from the end of an observable sequence.\n        * @description\n        *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of\n        *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.\n        * @param {Number} count Number of elements to take from the end of the source sequence.\n        * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.\n        */\n        takeLast(count: number): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.takeLast(1);\n});\n"],"sourceRoot":"/source/"}