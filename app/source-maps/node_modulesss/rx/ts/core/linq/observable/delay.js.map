{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/delay.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AA8DvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IACpB,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAExC,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC5C,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACvE,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAzC,CAAyC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/delay.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.\n        *\n        * @example\n        *  1 - res = Rx.Observable.delay(new Date());\n        *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);\n        *\n        *  3 - res = Rx.Observable.delay(5000);\n        *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);\n        * @memberOf Observable#\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.\n        * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Time-shifted sequence.\n        */\n        delay(dueTime: Date, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.\n        *\n        * @example\n        *  1 - res = Rx.Observable.delay(new Date());\n        *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);\n        *\n        *  3 - res = Rx.Observable.delay(5000);\n        *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);\n        * @memberOf Observable#\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.\n        * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Time-shifted sequence.\n        */\n        delay(dueTime: number, scheduler?: IScheduler): Observable<T>;\n\n        /**\n        *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.\n        *\n        * @example\n        *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only\n        *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector\n        *\n        * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.\n        * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.\n        * @returns {Observable} Time-shifted sequence.\n        */\n        delay(delayDurationSelector: (item: T) => ObservableOrPromise<number>): Observable<T>;\n\n        /**\n        *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.\n        *\n        * @example\n        *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only\n        *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector\n        *\n        * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.\n        * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.\n        * @returns {Observable} Time-shifted sequence.\n        */\n        delay(subscriptionDelay: Observable<number>, delayDurationSelector: (item: T) => ObservableOrPromise<number>): Observable<T>;\n    }\n}\n\n(function () {\n    var o: Rx.Observable<string>;\n    o.delay(1000);\n    o.delay(new Date());\n    o.delay(1000, Rx.Scheduler.async);\n    o.delay(new Date(), Rx.Scheduler.async);\n\n    o.delay(x => Rx.Observable.timer(x.length));\n    o.delay(Rx.Observable.timer(1000), x => Rx.Observable.timer(x.length));\n    o.delay(x => Rx.Observable.timer(x.length).toPromise());\n});\n"],"sourceRoot":"/source/"}