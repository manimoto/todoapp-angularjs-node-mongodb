{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/count.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAiB5C,CAAC;IACG,IAAI,EAA0B,CAAC;IAC/B,IAAI,EAA0B,CAAC;IAE/B,EAAE,CAAC,KAAK,EAAE,CAAC;IACX,EAAE,CAAC,KAAK,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IAC7B,EAAE,CAAC,KAAK,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,OAAA,IAAI,EAAJ,CAAI,EAAE,EAAE,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/count.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.\n        * @example\n        * res = source.count();\n        * res = source.count(function (x) { return x > 3; });\n        * @param {Function} [predicate]A function to test each element for a condition.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.\n        */\n        count(predicate?: _Predicate<T>, thisArg?: any): Observable<number>;\n    }\n}\n\n\n(function () {\n    var os : Rx.Observable<string>;\n    var on : Rx.Observable<number>;\n\n    on.count();\n    os.count((v, i, s) => false);\n    os.count((v, i, s) => true, {});\n});\n"],"sourceRoot":"/source/"}