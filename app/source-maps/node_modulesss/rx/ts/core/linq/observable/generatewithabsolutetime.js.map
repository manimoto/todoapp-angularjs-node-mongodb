{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/generatewithabsolutetime.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD","file":"node_modulesss/rx/ts/core/linq/observable/generatewithabsolutetime.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         *  Generates an observable sequence by iterating a state from an initial state until the condition fails.\n         *\n         * @example\n         *  res = source.generateWithAbsoluteTime(0,\n         *      function (x) { return return true; },\n         *      function (x) { return x + 1; },\n         *      function (x) { return x; },\n         *      function (x) { return new Date(); }\n         *  });\n         *\n         * @param {Mixed} initialState Initial state.\n         * @param {Function} condition Condition to terminate generation (upon returning false).\n         * @param {Function} iterate Iteration step function.\n         * @param {Function} resultSelector Selector function for results produced in the sequence.\n         * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.\n         * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.\n         * @returns {Observable} The generated sequence.\n         */\n        generateWithAbsoluteTime<TState, TResult>(\n            initialState: TState,\n            condition: (state: TState) => boolean,\n            iterate: (state: TState) => TState,\n            resultSelector: (state: TState) => TResult,\n            timeSelector: (state: TState) => Date,\n            scheduler?: IScheduler): Observable<TResult>;\n    }\n}\n"],"sourceRoot":"/source/"}