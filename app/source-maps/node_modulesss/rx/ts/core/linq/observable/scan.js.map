{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/scan.ts"],"names":[],"mappings":"AAAA,2CAA2C;AA6B3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAE7B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAS,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;IACpC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/scan.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.\n        *  For aggregation behavior with no intermediate results, see Observable.aggregate.\n        * @example\n        *  var res = source.scan(function (acc, x) { return acc + x; });\n        *  var res = source.scan(function (acc, x) { return acc + x; }, 0);\n        * @param {Function} accumulator An accumulator function to be invoked on each element.\n        * @param {Mixed} [seed] The initial accumulator value.\n        * @returns {Observable} An observable sequence containing the accumulated values.\n        */\n        scan<TAcc>(accumulator: _Accumulator<T, TAcc>, seed?: TAcc): Observable<TAcc>;\n        /**\n        *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.\n        *  For aggregation behavior with no intermediate results, see Observable.aggregate.\n        * @example\n        *  var res = source.scan(function (acc, x) { return acc + x; });\n        *  var res = source.scan(function (acc, x) { return acc + x; }, 0);\n        * @param {Function} accumulator An accumulator function to be invoked on each element.\n        * @param {Mixed} [seed] The initial accumulator value.\n        * @returns {Observable} An observable sequence containing the accumulated values.\n        */\n        scan(accumulator: _Accumulator<T, T>, seed?: T): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n\n    o = o.scan<number>((a, x) => a * x);\n    o = o.scan((a, x) => a * x, 1);\n});\n"],"sourceRoot":"/source/"}