{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/debounce.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAoBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC,CAAC,QAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,EAA5B,CAA4B,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/debounce.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Ignores values from an observable sequence which are followed by another value before dueTime.\n        * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).\n        * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} The debounced sequence.\n        */\n        debounce(dueTime: number, scheduler?: IScheduler): Observable<T>;\n\n        /**\n        * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.\n        * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.\n        * @returns {Observable} The debounced sequence.\n        */\n        debounce(debounceDurationSelector: (item: T) => ObservableOrPromise<any>): Observable<T>;\n    }\n}\n\n(function () {\n    var o: Rx.Observable<string>;\n    o.debounce(100);\n    o.debounce(100, Rx.Scheduler.async);\n    o.debounce(x => Rx.Observable.just(x.length));\n});\n"],"sourceRoot":"/source/"}