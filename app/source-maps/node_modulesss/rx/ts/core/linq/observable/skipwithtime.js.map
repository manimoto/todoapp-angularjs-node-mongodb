{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/skipwithtime.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAuBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/skipwithtime.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.\n        *\n        * @example\n        *  1 - res = source.skipWithTime(5000, [optional scheduler]);\n        *\n        * @description\n        *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.\n        *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded\n        *  may not execute immediately, despite the zero due time.\n        *\n        *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.\n        * @param {Number} duration Duration for skipping elements from the start of the sequence.\n        * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n        * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.\n        */\n        skipWithTime(duration: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.skipWithTime(1);\n    o = o.skipWithTime(100, Rx.Scheduler.default);\n});\n"],"sourceRoot":"/source/"}