{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/fromevent.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD","file":"node_modulesss/rx/ts/core/linq/observable/fromevent.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.\n         * @param {Object} element The DOMElement or NodeList to attach a listener.\n         * @param {String} eventName The event name to attach the observable sequence.\n         * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.\n         * @returns {Observable} An observable sequence of events from the specified element and the specified event.\n         */\n        fromEvent<T>(element: EventTarget, eventName: string, selector?: (arguments: any[]) => T): Observable<T>;\n        /**\n         * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.\n         * @param {Object} element The DOMElement or NodeList to attach a listener.\n         * @param {String} eventName The event name to attach the observable sequence.\n         * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.\n         * @returns {Observable} An observable sequence of events from the specified element and the specified event.\n         */\n        fromEvent<T>(element: { on: (name: string, cb: (e: any) => any) => void; off: (name: string, cb: (e: any) => any) => void }, eventName: string, selector?: (arguments: any[]) => T): Observable<T>;\n    }\n}\n"],"sourceRoot":"/source/"}