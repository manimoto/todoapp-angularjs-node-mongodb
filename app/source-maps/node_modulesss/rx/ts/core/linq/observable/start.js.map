{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/start.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAwBvD,CAAC;IACG,IAAI,CAAC,GAA2B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;IACjE,IAAI,CAAC,GAA2B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACvF,IAAI,CAAC,GAA2B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAC/F,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/start.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.\n        *\n        * @example\n        * var res = Rx.Observable.start(function () { console.log('hello'); });\n        * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);\n        * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);\n        *\n        * @param {Function} func Function to run asynchronously.\n        * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n        * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.\n        * @returns {Observable} An observable sequence exposing the function's result value, or an exception.\n        *\n        * Remarks\n        * * The function is called immediately, not during the subscription of the resulting sequence.\n        * * Multiple subscriptions to the resulting sequence can observe the function's result.\n        */\n        start<T>(func: () => T, scheduler?: IScheduler, context?: any): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string> = Rx.Observable.start(() => 'abc');\n    var o : Rx.Observable<string> = Rx.Observable.start(() => 'abc', Rx.Scheduler.default);\n    var o : Rx.Observable<string> = Rx.Observable.start(() => 'abc', Rx.Scheduler.default, {});\n});\n"],"sourceRoot":"/source/"}