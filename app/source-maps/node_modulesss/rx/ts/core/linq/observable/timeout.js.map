{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/timeout.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AA+DvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IACtB,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAE7C,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAA5B,CAA4B,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;IAC3E,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAA,CAAC,IAAI,OAAA,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAA5B,CAA4B,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1G,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/timeout.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns the source observable sequence or the other observable sequence if dueTime elapses.\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.\n        * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout(dueTime: Date, scheduler?: IScheduler): Observable<T>;\n\n        /**\n        *  Returns the source observable sequence or the other observable sequence if dueTime elapses.\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.\n        * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.\n        * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout(dueTime: Date, other?: Observable<T>, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Returns the source observable sequence or the other observable sequence if dueTime elapses.\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.\n        * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.\n        * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout(dueTime: number, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Returns the source observable sequence or the other observable sequence if dueTime elapses.\n        * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.\n        * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.\n        * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout(dueTime: number, other?: Observable<T>, scheduler?: IScheduler): Observable<T>;\n\n        /**\n        *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.\n        * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout<TTimeout>(timeoutdurationSelector: (item: T) => Observable<TTimeout>): Observable<T>;\n\n        /**\n        *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.\n        * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.\n        * @param {Observable} other  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout<TTimeout>(timeoutdurationSelector: (item: T) => Observable<TTimeout>, other: Observable<T>): Observable<T>;\n\n        /**\n        *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.\n        * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().\n        * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.\n        * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().\n        * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.\n        */\n        timeout<TTimeout>(firstTimeout: Observable<TTimeout>, timeoutdurationSelector: (item: T) => Observable<TTimeout>, other?: Observable<T>): Observable<T>;\n    }\n}\n\n\n(function () {\n    var o: Rx.Observable<string>;\n    o.timeout(100);\n    o.timeout(100, Rx.Scheduler.default);\n    o.timeout(new Date());\n    o.timeout(new Date(), Rx.Scheduler.default);\n    o.timeout(100, o);\n    o.timeout(new Date(), o);\n    o.timeout(100, o, Rx.Scheduler.async);\n    o.timeout(new Date(), o, Rx.Scheduler.async);\n\n    o.timeout(x => Rx.Observable.interval(1000));\n    o.timeout(x => Rx.Observable.interval(1000), Rx.Observable.just('100'));\n    o.timeout(Rx.Observable.interval(1000), x => Rx.Observable.interval(1000));\n    o.timeout(Rx.Observable.interval(1000), x => Rx.Observable.interval(1000), Rx.Observable.just('100'));\n});\n"],"sourceRoot":"/source/"}