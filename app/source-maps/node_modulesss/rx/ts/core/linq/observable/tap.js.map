{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/tap.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,+CAA+C;AA8F/C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAuB,CAAC;IAE5B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAEV,CAAC,CAAC,EAAE,CAAC,UAAC,CAAC,IAAM,CAAC,EAAE,UAAA,CAAC,IAAK,CAAC,EAAE,cAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAM,CAAC,EAAE,UAAA,CAAC,IAAK,CAAC,EAAE,cAAO,CAAC,CAAC,CAAC;IAEpC,CAAC,CAAC,QAAQ,CAAC,UAAC,CAAC,IAAO,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC,IAAO,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC,IAAO,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,UAAU,CAAC,UAAC,CAAC,IAAO,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,aAAa,CAAC,cAAQ,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,cAAc,CAAC,cAAQ,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,QAAQ,CAAC,UAAC,CAAC,IAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC,IAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,SAAS,CAAC,UAAC,CAAC,IAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,UAAU,CAAC,UAAC,CAAC,IAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC,aAAa,CAAC,cAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/B,CAAC,CAAC,cAAc,CAAC,cAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/tap.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../observer-lite.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.\n        * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        do(observer: Observer<T>): Observable<T>;\n        /**\n        *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.\n        * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        tap(observer: Observer<T>): Observable<T>;\n\n        /**\n        *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.\n        * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        do(onNext?: (value: T) => void, onError?: (exception: any) => void, onCompleted?: () => void): Observable<T>;\n        /**\n        *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.\n        * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        tap(onNext?: (value: T) => void, onError?: (exception: any) => void, onCompleted?: () => void): Observable<T>;\n\n        /**\n        *  Invokes an action for each element in the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onNext Action to invoke for each element in the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        doOnNext(onNext: (value: T) => void, thisArg?: any): Observable<T>;\n        /**\n        *  Invokes an action upon exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        doOnError(onError: (exception: any) => void, thisArg?: any): Observable<T>;\n        /**\n        *  Invokes an action upon graceful termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        doOnCompleted(onCompleted: () => void, thisArg?: any): Observable<T>;\n\n        /**\n        *  Invokes an action for each element in the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onNext Action to invoke for each element in the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        tapOnNext(onNext: (value: T) => void, thisArg?: any): Observable<T>;\n        /**\n        *  Invokes an action upon exceptional termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        tapOnError(onError: (exception: any) => void, thisArg?: any): Observable<T>;\n        /**\n        *  Invokes an action upon graceful termination of the observable sequence.\n        *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n        * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.\n        * @param {Any} [thisArg] Object to use as this when executing callback.\n        * @returns {Observable} The source sequence with the side-effecting behavior applied.\n        */\n        tapOnCompleted(onCompleted: () => void, thisArg?: any): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<string>;\n    var or: Rx.Observer<string>;\n\n    o.do(or);\n    o.tap(or);\n\n    o.do((v) => {}, e => {}, () => {});\n    o.tap((v) => {}, e => {}, () => {});\n\n    o.doOnNext((v) => { });\n    o.tapOnNext((v) => { });\n    o.doOnError((e) => { });\n    o.tapOnError((e) => { });\n    o.doOnCompleted(() => { });\n    o.tapOnCompleted(() => { });\n    o.doOnNext((v) => { }, {});\n    o.tapOnNext((v) => { }, {});\n    o.doOnError((e) => { }, {});\n    o.tapOnError((e) => { }, {});\n    o.doOnCompleted(() => { }, {});\n    o.tapOnCompleted(() => { }, {});\n});\n"],"sourceRoot":"/source/"}