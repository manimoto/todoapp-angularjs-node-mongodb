{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/defer.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAe5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;IAC7B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,cAAM,OAAA,CAAC,CAAC,SAAS,EAAE,EAAb,CAAa,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/defer.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n          *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.\n          *\n          * @example\n          *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });\n          * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.\n          * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.\n          */\n        defer<T>(observableFactory: () => ObservableOrPromise<T>): Observable<T>;\n    }\n}\n\n(function () {\n    var o: Rx.Observable<string>;\n    Rx.Observable.defer(() => o);\n    Rx.Observable.defer(() => o.toPromise());\n});\n"],"sourceRoot":"/source/"}