{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/merge.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AA8BvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAqB,CAAC;IAE1B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/merge.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Merges all the observable sequences into a single observable sequence.\n        * The scheduler is optional and if not specified, the immediate scheduler is used.\n        * @returns {Observable} The observable sequence that merges the elements of the observable sequences.\n        */\n        merge<T>(...sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Merges all the observable sequences into a single observable sequence.\n        * The scheduler is optional and if not specified, the immediate scheduler is used.\n        * @returns {Observable} The observable sequence that merges the elements of the observable sequences.\n        */\n        merge<T>(sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Merges all the observable sequences into a single observable sequence.\n        * The scheduler is optional and if not specified, the immediate scheduler is used.\n        * @returns {Observable} The observable sequence that merges the elements of the observable sequences.\n        */\n        merge<T>(scheduler: IScheduler, ...sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Merges all the observable sequences into a single observable sequence.\n        * The scheduler is optional and if not specified, the immediate scheduler is used.\n        * @returns {Observable} The observable sequence that merges the elements of the observable sequences.\n        */\n        merge<T>(scheduler: IScheduler, sources: ObservableOrPromise<T>[]): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var p: Rx.Promise<string>;\n\n    o = Rx.Observable.merge(o, p, o, p);\n    o = Rx.Observable.merge([o, p, o, p]);\n    o = Rx.Observable.merge(Rx.Scheduler.async, o, p, o, p);\n    o = Rx.Observable.merge(Rx.Scheduler.async, [o, p, o, p]);\n});\n"],"sourceRoot":"/source/"}