{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/distinct.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAmB5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/distinct.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.\n        *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.\n        *\n        * @example\n        *  var res = obs = xs.distinct();\n        *  2 - obs = xs.distinct(function (x) { return x.id; });\n        *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });\n        * @param {Function} [keySelector]  A function to compute the comparison key for each element.\n        * @param {Function} [comparer]  Used to compare items in the collection.\n        * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.\n        */\n        distinct<TKey>(keySelector?: (value: T) => TKey, keySerializer?: (key: TKey) => string): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n    o = o.distinct();\n    o = o.distinct(x => x.length);\n    o = o.distinct(x => x.length, x => x.toString() + '' + x);\n});\n"],"sourceRoot":"/source/"}