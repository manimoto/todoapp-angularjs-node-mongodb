{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/empty.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAgBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAU,CAAC;IAClC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAS,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/empty.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n  *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.\n  *\n  * @example\n  *  var res = Rx.Observable.empty();\n  *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);\n  * @param {Scheduler} [scheduler] Scheduler to send the termination call on.\n  * @returns {Observable} An observable sequence with no elements.\n  */\n        empty<T>(scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n    o = Rx.Observable.empty<string>();\n    o = Rx.Observable.empty<string>(Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}