{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/mergedelayerror.ts"],"names":[],"mappings":"AAAA,4CAA4C;AA8B5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAqB,CAAC;IAE1B,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/linq/observable/mergedelayerror.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to\n        * receive all successfully emitted items from all of the source Observables without being interrupted by\n        * an error notification from one of them.\n        *\n        * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an\n        * error via the Observer's onError, mergeDelayError will refrain from propagating that\n        * error notification until all of the merged Observables have finished emitting items.\n        * @param {Array | Arguments} args Arguments or an array to merge.\n        * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable\n        */\n        mergeDelayError<T>(...sources: ObservableOrPromise<T>[]): Observable<T>;\n        /**\n        * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to\n        * receive all successfully emitted items from all of the source Observables without being interrupted by\n        * an error notification from one of them.\n        *\n        * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an\n        * error via the Observer's onError, mergeDelayError will refrain from propagating that\n        * error notification until all of the merged Observables have finished emitting items.\n        * @param {Array | Arguments} args Arguments or an array to merge.\n        * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable\n        */\n        mergeDelayError<T>(sources: ObservableOrPromise<T>[]): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var p: Rx.Promise<string>;\n\n    Rx.Observable.mergeDelayError(o, p, o, p);\n    Rx.Observable.mergeDelayError([o, p, o, p]);\n})\n"],"sourceRoot":"/source/"}