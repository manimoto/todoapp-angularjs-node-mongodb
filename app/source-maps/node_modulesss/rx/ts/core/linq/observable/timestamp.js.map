{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/timestamp.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAsBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAuC,CAAC;IAC5C,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/timestamp.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Timestamp<T> {\n        value: T;\n        timestamp: number;\n    }\n\n    export interface Observable<T> {\n        /**\n        *  Records the timestamp for each value in an observable sequence.\n        *\n        * @example\n        *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }\n        *  2 - res = source.timestamp(Rx.Scheduler.default);\n        *\n        * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.\n        * @returns {Observable} An observable sequence with timestamp information on values.\n        */\n        timestamp(scheduler?: IScheduler): Observable<Timestamp<T>>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<number>;\n    var t : Rx.Observable<Rx.Timestamp<number>>;\n    t = o.timestamp(Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}