{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/singleinstance.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAa3C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAoC,CAAC;IACzC,IAAI,EAAuB,CAAC;IAC5B,IAAI,CAAqB,CAAC;IAC1B,IAAI,CAAwB,CAAC;IAE7B,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,CAAC;AAC3B,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/singleinstance.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        * Returns an observable sequence that shares a single subscription to the underlying sequence. This observable sequence\n        * can be resubscribed to, even if all prior subscriptions have ended. (unlike `.publish().refCount()`)\n        * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source.\n        */\n        singleInstance(): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    var oc: Rx.ConnectableObservable<number>;\n    var is: Rx.ISubject<number>;\n    var s: Rx.Subject<number>;\n    var a: Rx.Observable<string>;\n\n    o = o.singleInstance();\n});\n"],"sourceRoot":"/source/"}