{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/if.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAmBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAE9B,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,CAAC,CAAC,CAAC;IACjC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACzD,CAAC,CAAC,CAAA","file":"node_modulesss/rx/ts/core/linq/observable/if.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Determines whether an observable collection contains values.\n        *\n        * @example\n        *  1 - res = Rx.Observable.if(condition, obs1);\n        *  2 - res = Rx.Observable.if(condition, obs1, obs2);\n        *  3 - res = Rx.Observable.if(condition, obs1, scheduler);\n        * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.\n        * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.\n        * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.\n        * @returns {Observable} An observable sequence which is either the thenSource or elseSource.\n        */\n        if<T>(condition: () => boolean, thenSource: ObservableOrPromise<T>, elseSourceOrScheduler?: ObservableOrPromise<T> | IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<string>;\n\n    Rx.Observable.if(() => false, o);\n    Rx.Observable.if(() => false, o, o);\n    Rx.Observable.if(() => false, o, Rx.Scheduler.async);\n})\n"],"sourceRoot":"/source/"}