{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/interval.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAkB5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/interval.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n         *  Returns an observable sequence that produces a value after each period.\n         *\n         * @example\n         *  1 - res = Rx.Observable.interval(1000);\n         *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);\n         *\n         * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).\n         * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.\n         * @returns {Observable} An observable sequence that produces a value after each period.\n         */\n        interval(period: number, scheduler?: IScheduler): Observable<number>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<number>;\n    o = Rx.Observable.interval(100);\n    o = Rx.Observable.interval(100, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}