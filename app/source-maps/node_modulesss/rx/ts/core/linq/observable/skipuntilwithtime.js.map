{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/skipuntilwithtime.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AA+BvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAyB,CAAC;IAE9B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/skipuntilwithtime.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.\n        *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.\n        *\n        * @examples\n        *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);\n        *  2 - res = source.skipUntilWithTime(5000, [scheduler]);\n        * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.\n        * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n        * @returns {Observable} An observable sequence with the elements skipped until the specified start time.\n        */\n        skipUntilWithTime(startTime: Date, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.\n        *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.\n        *\n        * @examples\n        *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);\n        *  2 - res = source.skipUntilWithTime(5000, [scheduler]);\n        * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.\n        * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n        * @returns {Observable} An observable sequence with the elements skipped until the specified start time.\n        */\n        skipUntilWithTime(duration: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    var o2: Rx.Observable<number>;\n\n    o = o.skipUntilWithTime(new Date());\n    o = o.skipUntilWithTime(new Date(), Rx.Scheduler.default);\n    o = o.skipUntilWithTime(1000);\n    o = o.skipUntilWithTime(1000, Rx.Scheduler.default);\n});\n"],"sourceRoot":"/source/"}