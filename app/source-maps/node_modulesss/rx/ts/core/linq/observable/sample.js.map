{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/sample.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AA2DvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACd,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAE1D,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/sample.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Samples the observable sequence at each interval.\n        *\n        * @example\n        *  1 - res = source.sample(sampleObservable); // Sampler tick sequence\n        *  2 - res = source.sample(5000); // 5 seconds\n        *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds\n        *\n        * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.\n        * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Sampled observable sequence.\n        */\n        sample(intervalOrSampler: number, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Samples the observable sequence at each interval.\n        *\n        * @example\n        *  1 - res = source.sample(sampleObservable); // Sampler tick sequence\n        *  2 - res = source.sample(5000); // 5 seconds\n        *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds\n        *\n        * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.\n        * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Sampled observable sequence.\n        */\n        sample<TSample>(sampler: Observable<TSample>, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Samples the observable sequence at each interval.\n        *\n        * @example\n        *  1 - res = source.sample(sampleObservable); // Sampler tick sequence\n        *  2 - res = source.sample(5000); // 5 seconds\n        *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds\n        *\n        * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.\n        * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Sampled observable sequence.\n        */\n        throttleLatest(interval: number, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Samples the observable sequence at each interval.\n        *\n        * @example\n        *  1 - res = source.sample(sampleObservable); // Sampler tick sequence\n        *  2 - res = source.sample(5000); // 5 seconds\n        *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds\n        *\n        * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.\n        * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Sampled observable sequence.\n        */\n        throttleLatest<TSample>(sampler: Observable<TSample>, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o.sample(100);\n    o.sample(100, Rx.Scheduler.async);\n    o.sample(Rx.Observable.interval(100));\n    o.sample(Rx.Observable.interval(100), Rx.Scheduler.async);\n\n    o.throttleLatest(100);\n    o.throttleLatest(100, Rx.Scheduler.async);\n    o.throttleLatest(Rx.Observable.interval(100));\n    o.throttleLatest(Rx.Observable.interval(100), Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}