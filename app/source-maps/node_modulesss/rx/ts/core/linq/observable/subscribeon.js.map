{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/subscribeon.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAmBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/subscribeon.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;\n        *  see the remarks section for more information on the distinction between subscribeOn and observeOn.\n\n        *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer\n        *  callbacks on a scheduler, use observeOn.\n\n        *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.\n        *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.\n        */\n        subscribeOn(scheduler: IScheduler): Observable<T>;\n    }\n}\n\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    o = o.subscribeOn(Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}