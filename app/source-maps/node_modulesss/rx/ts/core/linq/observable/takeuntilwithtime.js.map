{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/takeuntilwithtime.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAqBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAyB,CAAC;IAE9B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/takeuntilwithtime.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.\n        * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.\n        * @param {Scheduler} [scheduler] Scheduler to run the timer on.\n        * @returns {Observable} An observable sequence with the elements taken until the specified end time.\n        */\n        takeUntilWithTime(endTime: Date, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.\n        * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.\n        * @param {Scheduler} [scheduler] Scheduler to run the timer on.\n        * @returns {Observable} An observable sequence with the elements taken until the specified end time.\n        */\n        takeUntilWithTime(duration: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n\n(function() {\n    var o: Rx.Observable<number>;\n    var o2: Rx.Observable<number>;\n\n    o = o.skipUntilWithTime(new Date());\n    o = o.skipUntilWithTime(new Date(), Rx.Scheduler.default);\n    o = o.skipUntilWithTime(1000);\n    o = o.skipUntilWithTime(1000, Rx.Scheduler.default);\n});\n"],"sourceRoot":"/source/"}