{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/partition.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAoB5C,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAiD,CAAC;IAEtD,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAX,CAAW,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/partition.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n         * Returns two observables which partition the observations of the source by the given function.\n         * The first will trigger observations for those values for which the predicate returns true.\n         * The second will trigger observations for those values where the predicate returns false.\n         * The predicate is executed once for each subscribed observer.\n         * Both also propagate all error observations arising from the source and each completes\n         * when the source completes.\n         * @param {Function} predicate\n         *    The function to determine which output Observable will trigger a particular observation.\n         * @returns {Array}\n         *    An array of observables. The first triggers when the predicate returns true,\n         *    and the second triggers when the predicate returns false.\n        */\n        partition(predicate: _Predicate<T>, thisArg?: any): [Observable<T>, Observable<T>];\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number>;\n    var r: [Rx.Observable<number>, Rx.Observable<number>];\n\n    r = o.partition(x => x % 2 === 0);\n});\n"],"sourceRoot":"/source/"}