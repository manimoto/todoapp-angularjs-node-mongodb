{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/range.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAkBvD,CAAC;IACG,IAAI,CAAC,GAA0B,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/range.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.\n        *\n        * @example\n        *  var res = Rx.Observable.range(0, 10);\n        *  var res = Rx.Observable.range(0, 10, Rx.Scheduler.timeout);\n        * @param {Number} start The value of the first integer in the sequence.\n        * @param {Number} count The number of sequential integers to generate.\n        * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.\n        * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.\n        */\n        range(start: number, count: number, scheduler?: IScheduler): Observable<number>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<number> = Rx.Observable.range(1, 2);\n    o = Rx.Observable.range(1, 2, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}