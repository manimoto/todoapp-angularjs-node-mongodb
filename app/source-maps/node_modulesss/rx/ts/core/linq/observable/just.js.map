{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/just.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAsBvD,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAyB,CAAC;IAC9B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/just.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.\n        *  There is an alias called 'just' or browsers <IE9.\n        * @param {Mixed} value Single element in the resulting observable sequence.\n        * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.\n        * @returns {Observable} An observable sequence containing the single specified element.\n        */\n        return<T>(value: T, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.\n        *  There is an alias called 'just' or browsers <IE9.\n        * @param {Mixed} value Single element in the resulting observable sequence.\n        * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.\n        * @returns {Observable} An observable sequence containing the single specified element.\n        */\n        just<T>(value: T, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var a : Rx.Observable<string>;\n    var b : Rx.Observable<number>;\n    b = Rx.Observable.return(1);\n    a = Rx.Observable.return('a', Rx.Scheduler.async);\n    b = Rx.Observable.just(1);\n    a = Rx.Observable.just('a', Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}