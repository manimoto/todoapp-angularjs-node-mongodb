{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/delaysubscription.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAkBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/delaysubscription.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface Observable<T> {\n        /**\n        *  Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.\n        *\n        * @example\n        *  1 - res = source.delaySubscription(5000); // 5s\n        *  2 - res = source.delaySubscription(5000, Rx.Scheduler.default); // 5 seconds\n        *\n        * @param {Number} dueTime Relative or absolute time shift of the subscription.\n        * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.\n        * @returns {Observable} Time-shifted sequence.\n        */\n        delaySubscription(dueTime: number, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o: Rx.Observable<string>;\n    o.delaySubscription(1000);\n    o.delaySubscription(1000, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}