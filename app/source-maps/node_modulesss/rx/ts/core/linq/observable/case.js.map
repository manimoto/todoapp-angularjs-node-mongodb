{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/case.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAC5C,uDAAuD;AAwBvD,CAAC;IACG,IAAI,CAAwB,CAAC;IAC7B,IAAI,CAAqB,CAAC;IAC1B,IAAI,CAAwB,CAAC;IAC7B,IAAI,EAAyB,CAAC;IAC9B,IAAI,EAAsB,CAAC;IAC3B,IAAI,EAAyB,CAAC;IAE9B,IAAI,EAAE,GAAwD,EAAE,CAAC;IACjE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACd,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACd,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEd,IAAI,EAAE,GAAwD,EAAE,CAAA;IAChE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAEX,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,CAAC,CAAA;IACvC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;IAC1C,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAE5D,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,EAAE,EAAE,CAAC,CAAA;IACpC,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACzC,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/case.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Uses selector to determine which source in sources to use.\n        * @param {Function} selector The function which extracts the value for to test in a case statement.\n        * @param {Array} sources A object which has keys which correspond to the case statement labels.\n        * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.\n        *\n        * @returns {Observable} An observable sequence which is determined by a case statement.\n        */\n        case<T>(selector: () => string, sources: { [key: string]: ObservableOrPromise<T>; }, schedulerOrElseSource?: IScheduler | ObservableOrPromise<T>): Observable<T>;\n        /**\n        *  Uses selector to determine which source in sources to use.\n        * @param {Function} selector The function which extracts the value for to test in a case statement.\n        * @param {Array} sources A object which has keys which correspond to the case statement labels.\n        * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.\n        *\n        * @returns {Observable} An observable sequence which is determined by a case statement.\n        */\n        case<T>(selector: () => number, sources: { [key: number]: ObservableOrPromise<T>; }, schedulerOrElseSource?: IScheduler | ObservableOrPromise<T>): Observable<T>;\n    }\n}\n\n(function() {\n    var o: Rx.Observable<string>;\n    var p: Rx.Promise<string>;\n    var e: Rx.Observable<string>;\n    var on: Rx.Observable<number>;\n    var pn: Rx.Promise<number>;\n    var en: Rx.Observable<number>;\n\n    var so : { [key: string]: Rx.ObservableOrPromise<string>; } = {};\n    so['abc'] = p;\n    so['def'] = e;\n    so['xyz'] = o;\n\n    var no : { [key: number]: Rx.ObservableOrPromise<number>; } = {}\n    no[1] = pn;\n    no[2] = en;\n    no[3] = on;\n\n    o = Rx.Observable.case(() => 'abc', so)\n    o = Rx.Observable.case(() => 'abc', so, e)\n    o = Rx.Observable.case(() => 'abc', so, Rx.Scheduler.async);\n\n    on = Rx.Observable.case(() => 1, no)\n    on = Rx.Observable.case(() => 2, no, en);\n    on = Rx.Observable.case(() => 3, no, Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}