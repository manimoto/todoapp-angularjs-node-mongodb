{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/forkjoin.ts"],"names":[],"mappings":"AAAA,4CAA4C;AAyB5C,CAAC;IACG,IAAI,CAAyB,CAAC;IAC9B,IAAI,CAAsB,CAAC;IAC3B,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/forkjoin.js","sourcesContent":["/// <reference path=\"../../observable.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Runs all observable sequences in parallel and collect their last elements.\n        *\n        * @example\n        *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);\n        *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);\n        * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.\n        */\n        forkJoin<T>(sources: ObservableOrPromise<T>[]): Observable<T[]>;\n\n        /**\n        *  Runs all observable sequences in parallel and collect their last elements.\n        *\n        * @example\n        *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);\n        *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);\n        * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.\n        */\n        forkJoin<T>(...args: ObservableOrPromise<T>[]): Observable<T[]>;\n    }\n}\n\n(function () {\n    var a : Rx.Observable<string>;\n    var b : Rx.Promise<string>;\n    Rx.Observable.forkJoin(a, b);\n    Rx.Observable.forkJoin([a, b]);\n});\n"],"sourceRoot":"/source/"}