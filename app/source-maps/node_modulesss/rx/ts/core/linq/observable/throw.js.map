{"version":3,"sources":["node_modulesss/rx/ts/core/linq/observable/throw.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,uDAAuD;AAoBvD,CAAC;IACG,IAAI,CAAsB,CAAC;IAC3B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;IACrC,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC","file":"node_modulesss/rx/ts/core/linq/observable/throw.js","sourcesContent":["/// <reference path=\"../../observable.ts\"/>\n/// <reference path=\"../../concurrency/scheduler.ts\" />\nmodule Rx {\n    export interface ObservableStatic {\n        /**\n        *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.\n        * @param {Mixed} error An object used for the sequence's termination.\n        * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.\n        * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.\n        */\n        throw<T>(exception: Error, scheduler?: IScheduler): Observable<T>;\n        /**\n        *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.\n        * @param {Mixed} error An object used for the sequence's termination.\n        * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.\n        * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.\n        */\n        throw<T>(exception: any, scheduler?: IScheduler): Observable<T>;\n    }\n}\n\n(function () {\n    var o : Rx.Observable<any>;\n    o = Rx.Observable.throw(new Error());\n    o = Rx.Observable.throw(new Error(), Rx.Scheduler.async);\n    o = Rx.Observable.throw('abc');\n    o = Rx.Observable.throw('abc', Rx.Scheduler.async);\n});\n"],"sourceRoot":"/source/"}